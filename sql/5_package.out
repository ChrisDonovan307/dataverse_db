SQL> 
SQL> 
SQL> -- Execute scripts  -------------------------------------------
SQL> 
SQL> start &&1
SQL> -- Package --------------------------------------------------------
SQL> 
SQL> create or replace package dataverse as
  2  	     TYPE strings_t IS TABLE OF VARCHAR2 (100);
  3  
  4  	 -- Procedures
  5  	     PROCEDURE findPubsByAuthor(
  6  		     authorName IN VARCHAR
  7  	     );
  8  
  9  	     PROCEDURE findDataSetsByAuthor(
 10  		     authorName IN VARCHAR
 11  	     );
 12  
 13  	     PROCEDURE dumpEmptyFiles;
 14  
 15  	     PROCEDURE keywordSummary(
 16  		     dataset in VARCHAR
 17  	     );
 18  
 19  	     PROCEDURE cleanKeywords(
 20  		     kw IN VARCHAR,
 21  		     aliases IN strings_t
 22  	     );
 23  
 24  	 procedure softwareUse(
 25  	     keyword_in varchar default null,
 26  	     subject_in varchar default null
 27  	 );
 28  	 procedure softwareLicenses(
 29  	     keyword_in varchar default null,
 30  	     subject_in varchar default null
 31  	 );
 32  	 procedure funderSummary(
 33  	     agency_name_in varchar default null,
 34  	     subject_in varchar default null
 35  	 );
 36  	 procedure searchAuthors(
 37  	     search_term varchar
 38  	 );
 39  
 40  	 -- Functions
 41  	     FUNCTION userLoginAttempt(
 42  		     user_ID IN int DEFAULT -1,
 43  		     password IN CHAR
 44  	     ) RETURN number;
 45  
 46  	     FUNCTION generateNewPassword(
 47  		     user_ID IN int DEFAULT -1
 48  	     ) RETURN CHAR;
 49  
 50  	     FUNCTION search(
 51  		     searchString IN VARCHAR
 52  	     ) RETURN strings_t;
 53  
 54  	 function fundingDistribution(
 55  	     agency_in in varchar default null,
 56  	     agency_id_in in int default null,
 57  	     col_in in varchar default null,
 58  	     col_id_in in int default null
 59  	 ) return number;
 60  
 61  	 function datasetActivity(
 62  	     id in varchar default null,
 63  	     start_date in date default null,
 64  	     end_date in date default null
 65  	 ) return number;
 66  
 67  	 function proportionGPL(
 68  	     subject_in varchar default null
 69  	 ) return number;
 70  
 71  	 function fundingImpact(
 72  	     grant_id_in in int default null,
 73  	     agency_name_in in varchar default null,
 74  	     metric in varchar default null
 75  	 ) return varchar;
 76  
 77  	 function totalSize(
 78  	     scope in varchar default null,
 79  	     id in varchar default null
 80  	 ) return number;
 81  
 82  end dataverse;
 83  /

Package created.

SQL> 
SQL> 
SQL> -- Body ------------------------------------------------------------
SQL> 
SQL> create or replace package body dataverse as
  2  
  3  	 -- Procedures --------------------------------------------------
  4  
  5  	     -- p1. findPubsByAuthor ----------------------------------------
  6  	     -- find all publications that list a given author
  7  	     PROCEDURE findPubsByAuthor(
  8  		     authorName IN VARCHAR
  9  	     )
 10  	     AS
 11  		     CURSOR pub IS
 12  			     SELECT pub_ID, citation, url
 13  		     FROM publication
 14  		     WHERE citation LIKE '%' || authorName || '%''';
 15  		     pub_record pub%ROWTYPE;
 16  	     BEGIN
 17  		     OPEN pub;
 18  		     FETCH pub INTO pub_record;
 19  		     WHILE pub%FOUND
 20  		     LOOP
 21  			     DBMS_OUTPUT.PUT_LINE(authorName || ' contributed to, ' || pub_record.pub_ID || ', '
 22  		     || pub_record.url || ', ' || pub_record.citation);
 23  		     END LOOP;
 24  		     CLOSE pub;
 25  	     END;
 26  
 27  	     -- p2. ---------------------------------------------------------
 28  	     -- Find all datasets that list a specified author and display information
 29  	     -- on those datasets in the form ds_ID, title, and url
 30  	     PROCEDURE findDataSetsByAuthor(
 31  		     authorName IN VARCHAR
 32  	     )
 33  	     AS
 34  		     CURSOR ds IS
 35  			     SELECT d.ds_ID, d.title, d.url
 36  		     FROM publication p, dataset d
 37  		     WHERE citation LIKE '%' || authorName || '%'''
 38  			     AND p.ds_ID = d.ds_ID;
 39  		     ds_record ds%ROWTYPE;
 40  	     BEGIN
 41  		     OPEN ds;
 42  		     FETCH ds INTO ds_record;
 43  		     WHILE ds%FOUND
 44  		     LOOP
 45  			     DBMS_OUTPUT.PUT_LINE(authorName || ' contributed to, ' || ds_record.ds_ID || ', '
 46  		     || ds_record.title || ', ' || ds_record.url);
 47  		     FETCH ds INTO ds_record;
 48  		     END LOOP;
 49  		     CLOSE ds;
 50  	     END;
 51  
 52  	     -- p3. ---------------------------------------------------------
 53  	     -- Need to create a secondary table to store the empty files
 54  	     -- before they are fully deleted.
 55  	     -- Included here for reference, but should not be executed along with procedures
 56  	     -- CREATE TABLE empty_files AS SELECT * FROM files;
 57  	     PROCEDURE dumpEmptyFiles
 58  	     AS
 59  		     CURSOR f IS
 60  			     SELECT * FROM files WHERE filesize <= 0;
 61  		     f_record f%ROWTYPE;
 62  	     BEGIN
 63  		     OPEN f;
 64  			     FETCH f INTO f_record;
 65  		     WHILE f%FOUND
 66  		     LOOP
 67  			     INSERT INTO empty_files VALUES(f_record.file_ID, f_record.ds_ID, f_record.filetype,
 68  			     f_record.filesize, f_record.title, f_record.description, f_record.downloads, f_record.pub_date);
 69  			     FETCH f INTO f_record;
 70  		     END LOOP;
 71  		     CLOSE f;
 72  	     END;
 73  
 74  	     -- p4. ---------------------------------------------------------
 75  	     -- Search through the keywords within a dataset and generate a summary
 76  	     -- table listing each keyword by its count (descending)
 77  	     --CREATE TABLE keyword_count (keyword VARCHAR(100), count_of number);
 78  	     PROCEDURE keywordSummary(
 79  		     dataset in VARCHAR
 80  	     )
 81  	     AS
 82  		     CURSOR kw IS
 83  			     SELECT keyword FROM keywords
 84  			     WHERE ds_ID = dataset;
 85  		     kw_record kw%ROWTYPE;
 86  		     kw_count number;
 87  		     kw_rec_count number;
 88  	     BEGIN
 89  		     OPEN kw;
 90  			     FETCH kw INTO kw_record;
 91  		     WHILE kw%FOUND
 92  		     LOOP
 93  			     SELECT COUNT(*)
 94  				     INTO kw_count
 95  				     FROM keywords
 96  				     WHERE keyword=kw_record.keyword;
 97  			     -- Has this keyword already been counted?
 98  				     SELECT COUNT(*)
 99  				     INTO kw_rec_count
100  				     FROM keyword_count
101  				     WHERE keyword=kw_record.keyword;
102  				     IF kw_rec_count = 0 THEN
103  			     INSERT INTO keyword_count VALUES(kw_record.keyword, kw_count);
104  			     -- Is the current count consistent with records?
105  			     ELSE
106  				     SELECT count_of
107  				     INTO kw_rec_count
108  				     FROM keyword_count
109  					     WHERE keyword=kw_record.keyword;
110  			     IF kw_count != kw_rec_count THEN
111  				     UPDATE keyword_count SET count_of=kw_count
112  					     WHERE keyword=kw_record.keyword;
113  			     END IF;
114  				     END IF;
115  			     FETCH kw INTO kw_record;
116  		     END LOOP;
117  		     CLOSE kw;
118  	     END;
119  
120  	     -- p5. ---------------------------------------------------------
121  	     -- Accepts a single keyword string and a list of alias strings
122  	     -- Consolidate all instances of aliases within the keywords table
123  	     -- to exactly match the provided keyword
124  	     PROCEDURE cleanKeywords(
125  		     kw IN VARCHAR,
126  		     aliases IN strings_t
127  	     )
128  	     AS
129  		     CURSOR ds IS
130  			     SELECT ds_ID FROM keywords;
131  		     ds_record ds%ROWTYPE;
132  		     match_count number;
133  		     a_record VARCHAR(100);
134  	     BEGIN
135  		     -- check all alias strings
136  		     FOR i IN aliases.FIRST..aliases.LAST
137  		     LOOP
138  			     a_record := aliases(i);
139  		     -- check for each dataset to prevent duplicate primary keys
140  			     OPEN ds;
141  		     FETCH ds INTO ds_record;
142  		     WHILE ds%FOUND
143  		     LOOP
144  			     SELECT COUNT(*)
145  				     INTO match_count
146  			     FROM keywords
147  			     WHERE keyword = kw AND ds_ID = ds_record.ds_ID;
148  				     -- If this dataset already contains a reference to the desired keyword
149  			     -- then simply delete the record containing this alias
150  			     IF match_count > 0 THEN
151  					     DELETE FROM keywords WHERE keyword = a_record;
152  			     -- otherwise update the record so that alias becomes kw
153  			     ELSE
154  				     UPDATE keywords
155  			     SET keyword = kw
156  			     WHERE keyword = a_record;
157  			     END IF;
158  			     FETCH ds INTO ds_record;
159  		     END LOOP;
160  		     CLOSE ds;
161  		     END LOOP;
162  	     END;
163  
164  	 -- p6. softwareUse ---------------------------------------------
165  
166  	 procedure softwareUse (
167  	     keyword_in in varchar default null,
168  	     subject_in in varchar default null
169  	 ) as
170  	     -- Define cursor
171  	     cursor software_summary is
172  		 select
173  		     s.name as software_name,
174  		     count(distinct d.ds_id) as use_count
175  		 from dataset d, analyzes a, software s, keywords k, subjects su
176  		 where d.ds_id = a.ds_id
177  		     and a.sw_id = s.sw_id
178  		     and d.ds_id = k.ds_id
179  		     and d.ds_id = su.ds_id
180  		     and (keyword_in is null or keyword_in = k.keyword)
181  		     and (subject_in is null or subject_in = su.subject)
182  		 group by s.name
183  		 order by use_count desc;
184  
185  	     -- Declare variables
186  	     input_check int;
187  	     record software_summary%rowtype;
188  
189  	 begin
190  
191  	     -- Make sure keyword_in is valid
192  	     if keyword_in is not null then
193  		 begin
194  		     select count(*)
195  		     into input_check
196  		     from keywords
197  		     where keyword = keyword_in;
198  		 exception
199  		     when no_data_found then
200  			 raise_application_error(-20001, 'Keyword not found.');
201  		 end;
202  	     end if;
203  
204  	     -- Make sure subject_in is valid
205  	     if subject_in is not null then
206  		 begin
207  		     select count(*)
208  		     into input_check
209  		     from subjects
210  		     where subject = subject_in;
211  		 exception
212  		     when no_data_found then
213  			 raise_application_error(-20002, 'Subject not found.');
214  		 end;
215  	     end if;
216  
217  	     -- Print from cursor
218  	     begin
219  		 open software_summary;
220  		 fetch software_summary into record;
221  
222  		 -- If no records returned, throw error
223  		 if not software_summary%found then
224  		     raise_application_error(-20003, 'No records found.');
225  		 end if;
226  
227  		 -- If records found, loop and print output
228  		 while software_summary%found loop
229  
230  		     dbms_output.put_line(
231  			 record.software_name || ': ' || record.use_count
232  		     );
233  		     fetch software_summary into record;
234  
235  		 end loop;
236  		 close software_summary;
237  	     end;
238  	 end;
239  
240  
241  	 -- p7. softwareLicenses ----------------------------------
242  
243  	 procedure softwareLicenses (
244  	     keyword_in varchar default null,
245  	     subject_in varchar default null
246  	 ) as
247  	     cursor license_table is
248  		 select
249  		     sl.name as license_name,
250  		     count(distinct d.ds_id) as use_count
251  		 from dataset d, software_license sl, keywords k, subjects s
252  		 where d.sw_lic_ID = sl.sw_lic_ID
253  		     and d.ds_id = k.ds_id
254  		     and d.ds_id = s.ds_id
255  		     and (keyword_in is null or keyword_in = k.keyword)
256  		     and (subject_in is null or subject_in = s.subject)
257  		 group by sl.name
258  		 order by use_count desc;
259  
260  	     -- Declare variables
261  	     input_check int;
262  	     record license_table%rowtype;
263  
264  	 begin
265  	     -- Make sure keyword_in is valid
266  	     if keyword_in is not null then
267  		 begin
268  		     select count(*)
269  		     into input_check
270  		     from keywords
271  		     where keyword = keyword_in;
272  		 exception
273  		     when no_data_found then
274  			 raise_application_error(-20001, 'Keyword not found.');
275  		 end;
276  	     end if;
277  
278  	     -- Make sure subject_in is valid
279  	     if subject_in is not null then
280  		 begin
281  		     select count(*)
282  		     into input_check
283  		     from subjects
284  		     where subject = subject_in;
285  		 exception
286  		     when no_data_found then
287  			 raise_application_error(-20002, 'Subject not found.');
288  		 end;
289  	     end if;
290  
291  	     -- Print from cursor
292  	     begin
293  		 open license_table;
294  		 fetch license_table into record;
295  
296  		 -- If no records returned, throw error
297  		 if not license_table%found then
298  		     raise_application_error(-20003, 'No records found.');
299  		 end if;
300  
301  		 -- If records found, loop and print output
302  		 while license_table%found loop
303  
304  		     dbms_output.put_line(
305  			 record.license_name || ': ' || record.use_count
306  		     );
307  		     fetch license_table into record;
308  
309  		 end loop;
310  		 close license_table;
311  	     end;
312  	 end;
313  
314  
315  	 -- p8. funderSummary ----------------------------------------
316  
317  	 procedure funderSummary (
318  	     agency_name_in in varchar default null,
319  	     subject_in in varchar default null
320  	 ) as
321  	     -- Declare cursor
322  	     cursor agency_table is
323  		 select
324  		     fa.name as name,
325  		     count(distinct p.pub_id) as pub_count,
326  		     sum(d.file_downloads) as downloads,
327  		     sum(g.amount) as total_funded
328  		 from
329  		     dataset d,
330  		     funds f,
331  		     funding_agency fa,
332  		     subjects s,
333  		     publication p,
334  		     grants g
335  		 where
336  		     d.ds_id = s.ds_id
337  		     and d.ds_id = f.ds_id
338  		     and f.agency_id = fa.agency_id
339  		     and d.ds_id = p.ds_id
340  		     and g.grant_id = f.grant_id
341  		     and (agency_name_in is null or agency_name_in = fa.name)
342  		     and (subject_in is null or subject_in = s.subject)
343  		 group by fa.name
344  		 order by fa.name;
345  
346  	     -- Declare variables
347  	     input_check int;
348  	     record agency_table%rowtype;
349  
350  	 begin
351  
352  	     -- Make sure agency name in is valid
353  	     if agency_name_in is not null then
354  		 begin
355  		     select count(*)
356  		     into input_check
357  		     from funding_agency
358  		     where name = agency_name_in;
359  		 exception
360  		     when no_data_found then
361  			 raise_application_error(-20001, 'Agency not found.');
362  		 end;
363  	     end if;
364  
365  	     -- Make sure subject_in is valid
366  	     if subject_in is not null then
367  		 begin
368  		     select count(*)
369  		     into input_check
370  		     from subjects
371  		     where subject = subject_in;
372  		 exception
373  		     when no_data_found then
374  			 raise_application_error(-20002, 'Subject not found.');
375  		 end;
376  	     end if;
377  
378  	     -- Print from cursor
379  	     begin
380  		 open agency_table;
381  		 fetch agency_table into record;
382  
383  		 -- If no records returned, throw error
384  		 if not agency_table%found then
385  		     raise_application_error(-20003, 'No records found.');
386  		 end if;
387  
388  		 -- If records found, loop and print output
389  		 while agency_table%found loop
390  
391  		     dbms_output.put_line(
392  			 record.name || ': ' ||
393  			 'Publications - ' || record.pub_count ||
394  			 '. Downloads - ' || record.downloads ||
395  			 '. Total Funded -  ' || record.total_funded || '.'
396  		     );
397  		     fetch agency_table into record;
398  
399  		 end loop;
400  		 close agency_table;
401  	     end;
402  
403  	 end;
404  
405  
406  	 -- p9: searchAuthors --------------------------------------
407  
408  	 procedure searchAuthors (search_term varchar) as
409  	     -- Define cursor
410  	     cursor author_matches is
411  		 select ru.name as name
412  		 from users u, registered_user ru, author a
413  		 where u.u_id = ru.u_id
414  		     and ru.ru_id = a.ru_id
415  		     and lower(ru.name) like '%' || lower(search_term) || '%';
416  
417  	     -- Define variables
418  	     record author_matches%rowtype;
419  
420  	 begin
421  	     -- Open cursor, fetch into record
422  	     open author_matches;
423  	     fetch author_matches into record;
424  
425  	     -- If no records returned, throw error
426  	     if not author_matches%found then
427  		 raise_application_error(-20001, 'No records found.');
428  	     end if;
429  
430  	     -- If records found, loop and print
431  	     while author_matches%found loop
432  		 dbms_output.put_line(record.name);
433  		 fetch author_matches into record;
434  
435  	     -- Close loop and cursor
436  	     end loop;
437  	     close author_matches;
438  
439  	 end;
440  
441  
442  	 -- f1. fundingDistribution --------------------------------
443  
444  	 function fundingDistribution(
445  		 agency_in in varchar default null,
446  		 agency_id_in in int default null,
447  		 col_in in varchar default null,
448  		 col_id_in in int default null
449  	 ) return number
450  	 as
451  	     agency_condition varchar(100);
452  	     col_condition varchar(100);
453  	     query varchar(2000);
454  	     n_rows int;
455  	     result number(6, 2);
456  	 begin
457  
458  	     -- Make sure there is at least one agency arg and at least one col arg
459  	     if agency_in is null and agency_id_in is null then
460  		 raise_application_error(
461  		     -20001,
462  		     'Please provide either an agency name or agency id.'
463  		 );
464  	     elsif col_in is null and col_id_in is null then
465  		 raise_application_error(
466  		     -20002,
467  		     'Please provide either a collection name or collection id.'
468  		 );
469  	     end if;
470  
471  	     -- Agency condition for dynamic query
472  	     if agency_in is not null then
473  		 agency_condition := 'fa.name = ''' || agency_in || '''';
474  	     else
475  		 agency_condition := 'fa.agency_ID = ''' || agency_id_in || '''';
476  	     end if;
477  
478  	     -- Collection condition for dynamic query
479  	     if col_in is not null then
480  		 col_condition := 'c.title = ''' || col_in || '''';
481  	     else
482  		 col_condition := 'c.col_ID = ''' || col_id_in || '''';
483  	     end if;
484  
485  	     -- Dynamic query. If 0, return an error. (agency does not fund in that col)
486  	     query :=
487  		 'select count(*)
488  		 from funding_agency fa, funds f, dataset d, collection c
489  		    where ' || agency_condition || '
490  		     and ' || col_condition || '
491  		     and fa.agency_ID = f.agency_ID
492  		     and f.ds_ID = d.ds_ID
493  		     and d.col_ID = c.col_ID';
494  	     execute immediate query into n_rows;
495  
496  	     -- If no rows returned, throw error
497  	     if n_rows = 0 then
498  		 raise_application_error(
499  		     -20003,
500  		     'No matching records found. No agency funding within that collection.'
501  		 );
502  	     end if;
503  
504  	     -- Dynamic query to get prop of datasets in collection sponsored by agency
505  	     query :=
506  		 'select sum(case when ' || agency_condition || ' then 1 else 0 end) / count(*)
507  		 from funding_agency fa, funds f, dataset d, collection c
508  		 where ' || col_condition || '
509  		     and fa.agency_ID = f.agency_ID
510  		     and f.ds_ID = d.ds_ID
511  		     and d.col_ID = c.col_ID';
512  
513  	     -- Run query and return result
514  	     execute immediate query into result;
515  	     return result;
516  
517  	 end;
518  
519  	     -- f2. --------------------------------------------------------
520  	     -- check if the hash of the provided password matches the
521  	     -- hash stored in the registered_user table
522  	     -- hashed using SHA-256
523  	     FUNCTION userLoginAttempt(
524  		     user_ID IN int DEFAULT -1,
525  		     password IN CHAR
526  	     ) RETURN number
527  	     AS
528  		     old_hash CHAR(64);
529  		     new_hash CHAR(64);
530  		     user_count number := 0;
531  	     BEGIN
532  		     -- verify that requested user exists
533  		     SELECT COUNT(*)
534  			     INTO user_count
535  		     FROM registered_user
536  		     WHERE ru_ID=user_ID;
537  		     IF user_count != 1 THEN
538  			     RETURN 0; -- No such user exists
539  		     END IF;
540  
541  		     -- hash the password provided to this function
542  		     SELECT STANDARD_HASH(RTRIM(password), 'SHA256')
543  			     INTO new_hash
544  			     FROM dual;
545  		     SELECT pw_hash
546  			     INTO old_hash
547  			     FROM registered_user
548  		     WHERE ru_ID=user_ID;
549  		     IF new_hash = old_hash THEN
550  			     RETURN 1; -- passwords match, successful login
551  		     ELSE
552  			     RETURN 0; -- unsuccessful login
553  		     END IF;
554  	     END;
555  
556  	     -- f3. -------------------------------------------------------
557  	     -- If the given user exists within registered_user
558  	     -- randomly generate a new password that is alphanumeric
559  	     -- and 8 characters long. Verify that it does not match the hash
560  	     -- of the previous password. Set this new hash within registered_user
561  	     -- and return the new password value.
562  	     FUNCTION generateNewPassword(
563  		     user_ID IN int DEFAULT -1
564  	     ) RETURN CHAR
565  	     AS
566  		     user_count number := 0;
567  		     old_hash CHAR(64);
568  		     new_pw CHAR(8);
569  		     new_pw_hash CHAR(64);
570  	     BEGIN
571  		     -- Check for existence of said user
572  		     SELECT COUNT(*)
573  			     INTO user_count
574  		     FROM registered_user
575  		     WHERE ru_ID=user_ID;
576  		     IF user_count <> 1 THEN
577  			     RAISE_APPLICATION_ERROR(-20500, 'User does not exist');
578  		     END IF;
579  
580  		     -- Generate new random password and check against previous hash
581  		     new_pw := DBMS_RANDOM.STRING('x', 8);
582  		     SELECT STANDARD_HASH(RTRIM(new_pw), 'SHA256')
583  			     INTO new_pw_hash
584  			     FROM dual;
585  		     SELECT pw_hash
586  			     INTO old_hash
587  			     FROM registered_user
588  			     WHERE ru_ID=user_ID;
589  		     WHILE old_hash = new_pw_hash
590  		     LOOP
591  			     new_pw := DBMS_RANDOM.STRING('x', 8);
592  		     SELECT STANDARD_HASH(RTRIM(new_pw), 'SHA256')
593  			     INTO new_pw_hash
594  			     FROM dual;
595  		     END LOOP;
596  		     RETURN new_pw;
597  	     END;
598  
599  	     -- f4. -------------------------------------------------------
600  	     -- Split the searchString into tokens around whitespace.
601  	     -- Check through all Collection, Dataset, File, Publication, and Author
602  	     -- records to determine if a direct match is found. Return matching tuples
603  	     FUNCTION search(
604  		     searchString IN VARCHAR
605  	     ) RETURN strings_t
606  	     AS
607  		     match_count int;
608  		     start_index NUMBER := 1;
609  		     end_index NUMBER;
610  		     item VARCHAR2(255);
611  		     -- default value is empty collection???
612  		     items strings_t := strings_t();
613  	     BEGIN
614  		     LOOP
615  			     end_index := INSTR(searchString, ',', start_index);
616  			     IF end_index = 0 THEN
617  				     item := SUBSTR(searchString, start_index);
618  			     -- misses the last item for now. Copy over after testing
619  			     FOR t IN (SELECT owner, table_name, column_name
620  				     FROM all_tab_columns
621  			     WHERE owner <> 'SYS' AND data_type LIKE '%CHAR%')
622  			     LOOP
623  
624  			     EXECUTE IMMEDIATE
625  			     'SELECT COUNT(*) FROM ' || t.owner || '.' || t.table_name ||
626  			     ' WHERE ' || t.column_name || ' LIKE ''%' || item || '%'''
627  			     INTO match_count;
628  
629  			     IF match_count > 0 THEN
630  				items.EXTEND;
631  				items(items.LAST) := '' || match_count || ' matches for ' || item ||
632  				' found in ' || t.table_name || '.' || t.column_name || '';
633  				match_count := 0;
634  			     END IF;
635  			     END LOOP;
636  				     RETURN items;
637  			     END IF;
638  
639  			     item := SUBSTR(searchString, start_index, end_index - start_index);
640  			     -- Process item here
641  		     -- Find all non-system table.column with text datatype
642  			     FOR t IN (SELECT owner, table_name, column_name
643  				     FROM all_tab_columns
644  				     WHERE owner <> 'SYS' AND data_type LIKE '%CHAR%')
645  				     LOOP
646  
647  				     -- Select tuples that contain the keyword within a text field
648  				     EXECUTE IMMEDIATE
649  				     'SELECT COUNT(*) FROM ' || t.owner || '.' ||  t.table_name ||
650  				     ' WHERE ' || t.column_name || ' LIKE ''%' || item || '%'''
651  				     INTO match_count;
652  
653  				     -- When we find match tuples, append them to the items text table
654  				     IF match_count > 0 THEN
655  					     items.EXTEND;
656  					     items(items.LAST) := '' || match_count || ' matches for ' || item ||
657  					     ' found in ' || t.table_name || '.' || t.column_name || '';
658  					     match_count := 0;
659  				     END IF;
660  				     END LOOP;
661  
662  		     --items.EXTEND;
663  		     --items(items.LAST) := REPLACE(REGEXP_REPLACE(item, '\s'), CHR(0));
664  
665  			     start_index := end_index + 1;
666  		     END LOOP;
667  		     RETURN items;
668  	     END;
669  
670  
671  	 -- f5. datasetActivity ---------------------------------------
672  
673  	 function datasetActivity(
674  		 id in varchar default null,
675  		 start_date in date default null,
676  		 end_date in date default null
677  	 ) return number
678  	 as
679  	     start_timestamp timestamp;
680  	     end_timestamp timestamp;
681  	     diff_days number;
682  	     downloads_in_window int;
683  	     activity number(6, 3);
684  	 begin
685  
686  	     -- Make sure id is provided
687  	     if id is null then
688  		 raise_application_error(-20001, 'Please provide a dataset ID.');
689  	     end if;
690  
691  	     -- If no start date, use pub_date from dataset, else just convert to timestamp
692  	     if start_date is null then
693  		 select cast(pub_date as timestamp)
694  		 into start_timestamp
695  		 from dataset
696  		 where ds_ID = id;
697  	     else
698  		 start_timestamp := cast(start_date as timestamp);
699  	     end if;
700  
701  	     -- If no end date, use current timestamp
702  	     if end_date is null then
703  		 select current_timestamp
704  		 into end_timestamp
705  		 from dual;
706  	     else
707  		 end_timestamp := cast(end_date as timestamp);
708  	     end if;
709  
710  	     -- Calculate how many days are between start and end
711  	     diff_days := extract(day from (end_timestamp - start_timestamp));
712  
713  	     -- Get downloads in that time
714  	     select count(*)
715  	     into downloads_in_window
716  	     from dataset_download
717  	     where ds_ID = id
718  		 and timestamp > start_timestamp
719  		 and timestamp <= end_timestamp;
720  
721  	     -- Calculate downloads per day in that window
722  	     activity := downloads_in_window / diff_days;
723  	     return activity;
724  
725  	 end;
726  
727  
728  	 -- f6. proportionGPL -----------------------------------
729  
730  	 function proportionGPL(
731  	     subject_in in varchar default null
732  	 ) return number
733  	 as
734  	     dummy int := 0;
735  	     prop_gpl number(4, 2);
736  	 begin
737  
738  	     -- If no input, get prop for whole database
739  	     if subject_in is null then
740  		 select sum(case when sw.name = 'GPL-3.0' then 1 else 0 end) / count(*)
741  		 into prop_gpl
742  		 from software_license sw, dataset d
743  		 where sw.sw_lic_ID = d.sw_lic_ID;
744  		 return prop_gpl;
745  
746  	     -- Prop by subject
747  	     elsif subject_in is not null then
748  
749  		 -- Check whether subject is in subjects table
750  		 begin
751  		     select count(*)
752  		     into dummy
753  		     from subjects
754  		     where subject = subject_in;
755  		 exception
756  		     when no_data_found then
757  			 dummy := 0;
758  		 end;
759  
760  		 -- If dummy is 1 (subject exists), run function and return
761  		 if dummy >= 1 then
762  		     select sum(case when sw.name = 'GPL-3.0' then 1 else 0 end) / count(*)
763  		     into prop_gpl
764  		     from software_license sw, dataset d, subjects s
765  		     where s.ds_ID = d.ds_ID
766  			 and sw.sw_lic_ID = d.sw_lic_ID
767  			 and subject_in = s.subject;
768  		     return prop_gpl;
769  
770  		 -- If dummy is 0, (no subject), throw error
771  		 elsif dummy = 0 then
772  		     raise_application_error(
773  			 -20001,
774  			 'Subject not found in Dataverse.'
775  		     );
776  		 end if;
777  
778  	     end if;
779  	 end;
780  
781  
782  	 -- f7. fundingImpact --------------------------------------
783  
784  	 function fundingImpact(
785  	     grant_id_in in int default null,
786  	     agency_name_in in varchar default null,
787  	     metric in varchar default null
788  	 ) return varchar
789  	 as
790  	     row_check int;
791  	     conditions varchar(1000);
792  	     query varchar(1000);
793  	     result int;
794  	 begin
795  
796  	     -- Make sure is either a grant id or name input
797  	     if grant_id_in is null and agency_name_in is null then
798  		 raise_application_error(
799  		     -20001,
800  		     'Please provide either a grant ID or a funding agency name.'
801  		 );
802  	     end if;
803  
804  	     -- Metric input can either be publications or downloads
805  	     if metric not in ('publications', 'downloads') then
806  		 raise_application_error(
807  		     -20002,
808  		     'Please provide a metric as either "publications" or "downloads".'
809  		 );
810  	     end if;
811  
812  	     -- If both agency id and grant number are used, make sure they coincide
813  	     if grant_id_in is not null and agency_name_in is not null then
814  		 select count(*)
815  		 into row_check
816  		 from dataset d, funds f, funding_agency fa
817  		 where d.ds_id = f.ds_ID
818  		     and f.agency_ID = fa.agency_ID
819  		     and f.grant_ID = grant_id_in
820  		     and fa.name = agency_name_in;
821  		 if row_check = 0 then
822  		     raise_application_error(-20003, 'No records found.');
823  		 end if;
824  	     end if;
825  
826  	     -- Conditions based on inputs to use in query
827  	     conditions := '';
828  
829  	     if grant_id_in is not null then
830  		 conditions := conditions || ' and f.grant_ID = ''' || grant_id_in || '''';
831  	     end if;
832  
833  	     if agency_name_in is not null then
834  		 conditions := conditions || ' and fa.name = ''' || agency_name_in || '''';
835  	     end if;
836  
837  	     -- If metric is publications, create query
838  	     if metric = 'publications' then
839  
840  		 query :=
841  		     'select count(*)
842  		     from dataset d, publication p, funds f, funding_agency fa
843  		     where d.ds_ID = p.ds_ID
844  			 and d.ds_ID = f.ds_ID
845  			 and fa.agency_ID = f.agency_ID
846  			 ' || conditions;
847  
848  	     -- If metric is downloads, create query
849  	     elsif metric = 'downloads' then
850  
851  		 query :=
852  		     'select sum(d.file_downloads)
853  		     from dataset d, funds f, funding_agency fa
854  		     where d.ds_ID = f.ds_ID
855  			 and f.agency_ID = fa.agency_ID
856  			 ' || conditions;
857  
858  	     end if;
859  
860  	     -- Execute query
861  	     execute immediate query into result;
862  	     return result;
863  
864  	 end;
865  
866  
867  	 -- f8. totalSize -------------------------------------------------
868  
869  	 function totalSize(
870  	     scope in varchar default null,
871  	     id in varchar default null
872  	 ) return number
873  	 as
874  	     TOTALSIZE number;
875  	     IDCHECK int := 0;
876  	 begin
877  	     -- Checking bad inputs --------
878  	     -- if user gives id but not scope, throw error
879  	     if scope is null and id is not null then
880  		 raise_application_error(
881  		     -20001,
882  		     'If scope is specified, id must be provided.'
883  		 );
884  
885  	     -- if scope but no id, also error
886  	     elsif scope is not null and id is null then
887  		 raise_application_error(
888  		     -20001,
889  		     'If id is specified, scope must be provided.'
890  		 );
891  
892  	     -- if no inputs, get filesize of whole dataverse
893  	     elsif scope is null and id is null then
894  		 select sum(filesize)
895  		 into TOTALSIZE
896  		 from files;
897  		 return TOTALSIZE;
898  
899  	     -- Check that scope input is one of three available options
900  	     elsif scope not in ('dataset', 'collection', 'dataverse') then
901  		 raise_application_error(
902  		     -20001,
903  		     'Input for scope must be dataset, collection, or dataverse'
904  		 );
905  	     end if;
906  
907  
908  	     -- Start calculations based on scope now --------
909  	     -- dataset
910  	     if scope = 'dataset' then
911  
912  		 -- Save a 1/0 value for whether the id exists
913  		 begin
914  		     select 1
915  		     into IDCHECK
916  		     from dataset
917  		     where ds_ID = id;
918  
919  		 -- include exception to set IDCHECK to 0 if nothing found
920  		 exception
921  		     when NO_DATA_FOUND then
922  			 IDCHECK := 0;
923  		 end;
924  
925  		 -- if id exists, calculate total size
926  		 if IDCHECK = 1 then
927  		     select sum(filesize)
928  		     into TOTALSIZE
929  		     from files
930  		     where ds_ID = id;
931  
932  		 -- if id does not exist, throw error
933  		 elsif IDCHECK = 0 then
934  		     raise_application_error(
935  			 -20001,
936  			 'ds_ID is not found in dataset table.'
937  		     );
938  
939  		 end if;
940  	     end if;
941  
942  	     -- collection
943  	     if scope = 'collection' then
944  		 begin
945  		     select 1
946  		     into IDCHECK
947  		     from collection
948  		     where col_ID = id;
949  		 exception
950  		     when NO_DATA_FOUND then
951  			 IDCHECK := 0;
952  		 end;
953  
954  		 if IDCHECK = 1 then
955  		     select sum(f.filesize)
956  		     into TOTALSIZE
957  		     from files f, dataset d, collection c
958  		     where c.col_ID = d.col_ID
959  			 and d.ds_ID = f.ds_ID
960  			 and c.col_ID = id;
961  
962  		 elsif IDCHECK = 0 then
963  		     raise_application_error(
964  			 -20001,
965  			 'col_ID is not found in collection table.'
966  		     );
967  
968  		 end if;
969  	     end if;
970  
971  	     -- dataverse
972  	     if scope = 'dataverse' then
973  		 begin
974  		     select 1
975  		     into IDCHECK
976  		     from root_dataverse
977  		     where root_ID = id;
978  		 exception
979  		     when NO_DATA_FOUND then
980  			 IDCHECK := 0;
981  		 end;
982  
983  		 if IDCHECK = 1 then
984  		     select sum(f.filesize)
985  		     into TOTALSIZE
986  		     from files f, dataset d, collection c, root_dataverse r
987  		     where f.ds_ID = d.ds_ID
988  			 and d.col_ID = c.col_ID
989  			 and c.root_ID = r.root_ID
990  			 and r.root_ID = id;
991  
992  		 elsif IDCHECK = 0 then
993  		     raise_application_error(
994  			 -20001,
995  			 'root_ID is not found in root_dataverse table.'
996  		     );
997  
998  		 end if;
999  	     end if;
1000  
1001  	      return TOTALSIZE;
1002  	  end;
1003  
1004  
1005  end dataverse;
1006  /

Package body created.

SQL> 
SQL> show errors
No errors.
SQL> 
SQL> commit;

Commit complete.

SQL> SQL> 
SQL> 
SQL> -- Restore options --------------------------------------------
SQL> 
SQL> spool off
