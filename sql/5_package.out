SQL> 
SQL> 
SQL> -- Execute scripts  -------------------------------------------
SQL> 
SQL> start &&1
SQL> -- Package --------------------------------------------------------
SQL> 
SQL> create or replace package dataverse as
  2  	     --TYPE strings_t IS TABLE OF VARCHAR2 (100);
  3  	     -- could not get custom type to behave within this Package
  4  	     -- type and dependent routines have been moved into
  5  	     -- extra_routines.sql
  6  
  7  	 -- Procedures
  8  	     PROCEDURE findPubsByAuthor(
  9  		     authorName IN VARCHAR
 10  	     );
 11  
 12  	     PROCEDURE findDataSetsByAuthor(
 13  		     authorName IN VARCHAR
 14  	     );
 15  
 16  	     PROCEDURE dumpEmptyFiles;
 17  
 18  	     PROCEDURE keywordSummary(
 19  		     dataset in VARCHAR
 20  	     );
 21  
 22  	 procedure softwareUse(
 23  	     keyword_in varchar default null,
 24  	     subject_in varchar default null
 25  	 );
 26  	 procedure softwareLicenses(
 27  	     keyword_in varchar default null,
 28  	     subject_in varchar default null
 29  	 );
 30  	 procedure funderSummary(
 31  	     agency_name_in varchar default null,
 32  	     subject_in varchar default null
 33  	 );
 34  	 procedure searchAuthors(
 35  	     search_term varchar
 36  	 );
 37  
 38  	 -- Functions
 39  	     FUNCTION userLoginAttempt(
 40  		     user_ID IN int DEFAULT -1,
 41  		     password IN CHAR
 42  	     ) RETURN number;
 43  
 44  	     FUNCTION generateNewPassword(
 45  		     user_ID IN int DEFAULT -1
 46  	     ) RETURN CHAR;
 47  
 48  	 function fundingDistribution(
 49  	     agency_in in varchar default null,
 50  	     agency_id_in in int default null,
 51  	     col_in in varchar default null,
 52  	     col_id_in in int default null
 53  	 ) return number;
 54  
 55  	 function datasetActivity(
 56  	     id in varchar default null,
 57  	     start_date in date default null,
 58  	     end_date in date default null
 59  	 ) return number;
 60  
 61  	 function proportionGPL(
 62  	     subject_in varchar default null
 63  	 ) return number;
 64  
 65  	 function fundingImpact(
 66  	     grant_id_in in int default null,
 67  	     agency_name_in in varchar default null,
 68  	     metric in varchar default null
 69  	 ) return varchar;
 70  
 71  	 function totalSize(
 72  	     scope in varchar default null,
 73  	     id in varchar default null
 74  	 ) return number;
 75  
 76  end dataverse;
 77  /

Package created.

SQL> 
SQL> 
SQL> -- Body ------------------------------------------------------------
SQL> 
SQL> create or replace package body dataverse as
  2  
  3  	 -- Procedures --------------------------------------------------
  4  
  5  	     -- p1. findPubsByAuthor ----------------------------------------
  6  	     -- find all publications that list a given author
  7  	     PROCEDURE findPubsByAuthor(
  8  		     authorName IN VARCHAR
  9  	     )
 10  	     AS
 11  		     CURSOR pub IS
 12  			     SELECT pub_ID, citation, url
 13  		     FROM publication
 14  		     WHERE citation LIKE '%' || authorName || '%''';
 15  		     pub_record pub%ROWTYPE;
 16  	     BEGIN
 17  		     OPEN pub;
 18  		     FETCH pub INTO pub_record;
 19  		     WHILE pub%FOUND
 20  		     LOOP
 21  			     DBMS_OUTPUT.PUT_LINE(authorName || ' contributed to, ' || pub_record.pub_ID || ', '
 22  		     || pub_record.url || ', ' || pub_record.citation);
 23  		     END LOOP;
 24  		     CLOSE pub;
 25  	     END;
 26  
 27  	     -- p2. ---------------------------------------------------------
 28  	     -- Find all datasets that list a specified author and display information
 29  	     -- on those datasets in the form ds_ID, title, and url
 30  	     PROCEDURE findDataSetsByAuthor(
 31  		     authorName IN VARCHAR
 32  	     )
 33  	     AS
 34  		     CURSOR ds IS
 35  			     SELECT d.ds_ID, d.title, d.url
 36  		     FROM publication p, dataset d
 37  		     WHERE citation LIKE '%' || authorName || '%'''
 38  			     AND p.ds_ID = d.ds_ID;
 39  		     ds_record ds%ROWTYPE;
 40  	     BEGIN
 41  		     OPEN ds;
 42  		     FETCH ds INTO ds_record;
 43  		     WHILE ds%FOUND
 44  		     LOOP
 45  			     DBMS_OUTPUT.PUT_LINE(authorName || ' contributed to, ' || ds_record.ds_ID || ', '
 46  		     || ds_record.title || ', ' || ds_record.url);
 47  		     FETCH ds INTO ds_record;
 48  		     END LOOP;
 49  		     CLOSE ds;
 50  	     END;
 51  
 52  	     -- p3. ---------------------------------------------------------
 53  	     -- Need to create a secondary table to store the empty files
 54  	     -- before they are fully deleted.
 55  	     -- Included here for reference, but should not be executed along with procedures
 56  	     -- CREATE TABLE empty_files AS SELECT * FROM files;
 57  	     PROCEDURE dumpEmptyFiles
 58  	     AS
 59  		     CURSOR f IS
 60  			     SELECT * FROM files WHERE filesize <= 0;
 61  		     f_record f%ROWTYPE;
 62  	     BEGIN
 63  		     OPEN f;
 64  			     FETCH f INTO f_record;
 65  		     WHILE f%FOUND
 66  		     LOOP
 67  			     INSERT INTO empty_files VALUES(f_record.file_ID, f_record.ds_ID, f_record.filetype,
 68  			     f_record.filesize, f_record.title, f_record.description, f_record.downloads, f_record.pub_date);
 69  			     FETCH f INTO f_record;
 70  		     END LOOP;
 71  		     CLOSE f;
 72  	     END;
 73  
 74  	     -- p4. ---------------------------------------------------------
 75  	     -- Search through the keywords within a dataset and generate a summary
 76  	     -- table listing each keyword by its count (descending)
 77  	     --CREATE TABLE keyword_count (keyword VARCHAR(100), count_of number);
 78  	     PROCEDURE keywordSummary(
 79  		     dataset in VARCHAR
 80  	     )
 81  	     AS
 82  		     CURSOR kw IS
 83  			     SELECT keyword FROM keywords
 84  			     WHERE ds_ID = dataset;
 85  		     kw_record kw%ROWTYPE;
 86  		     kw_count number;
 87  		     kw_rec_count number;
 88  	     BEGIN
 89  		     OPEN kw;
 90  			     FETCH kw INTO kw_record;
 91  		     WHILE kw%FOUND
 92  		     LOOP
 93  			     SELECT COUNT(*)
 94  				     INTO kw_count
 95  				     FROM keywords
 96  				     WHERE keyword=kw_record.keyword;
 97  			     -- Has this keyword already been counted?
 98  				     SELECT COUNT(*)
 99  				     INTO kw_rec_count
100  				     FROM keyword_count
101  				     WHERE keyword=kw_record.keyword;
102  				     IF kw_rec_count = 0 THEN
103  			     INSERT INTO keyword_count VALUES(kw_record.keyword, kw_count);
104  			     -- Is the current count consistent with records?
105  			     ELSE
106  				     SELECT count_of
107  				     INTO kw_rec_count
108  				     FROM keyword_count
109  					     WHERE keyword=kw_record.keyword;
110  			     IF kw_count != kw_rec_count THEN
111  				     UPDATE keyword_count SET count_of=kw_count
112  					     WHERE keyword=kw_record.keyword;
113  			     END IF;
114  				     END IF;
115  			     FETCH kw INTO kw_record;
116  		     END LOOP;
117  		     CLOSE kw;
118  	     END;
119  
120  	     -- p5. ---------------------------------------------------------
121  	     -- cleanKeywords has been moved to extra_routines.sql to resolve
122  	     -- an issue with a custom table type that it depends on
123  
124  	 -- p6. softwareUse ---------------------------------------------
125  
126  	 procedure softwareUse (
127  	     keyword_in in varchar default null,
128  	     subject_in in varchar default null
129  	 ) as
130  	     -- Define cursor
131  	     cursor software_summary is
132  		 select
133  		     s.name as software_name,
134  		     count(distinct d.ds_id) as use_count
135  		 from dataset d, analyzes a, software s, keywords k, subjects su
136  		 where d.ds_id = a.ds_id
137  		     and a.sw_id = s.sw_id
138  		     and d.ds_id = k.ds_id
139  		     and d.ds_id = su.ds_id
140  		     and (keyword_in is null or keyword_in = k.keyword)
141  		     and (subject_in is null or subject_in = su.subject)
142  		 group by s.name
143  		 order by use_count desc;
144  
145  	     -- Declare variables
146  	     input_check int;
147  	     record software_summary%rowtype;
148  
149  	 begin
150  
151  	     -- Make sure keyword_in is valid
152  	     if keyword_in is not null then
153  		 begin
154  		     select count(*)
155  		     into input_check
156  		     from keywords
157  		     where keyword = keyword_in;
158  		 exception
159  		     when no_data_found then
160  			 raise_application_error(-20001, 'Keyword not found.');
161  		 end;
162  	     end if;
163  
164  	     -- Make sure subject_in is valid
165  	     if subject_in is not null then
166  		 begin
167  		     select count(*)
168  		     into input_check
169  		     from subjects
170  		     where subject = subject_in;
171  		 exception
172  		     when no_data_found then
173  			 raise_application_error(-20002, 'Subject not found.');
174  		 end;
175  	     end if;
176  
177  	     -- Print from cursor
178  	     begin
179  		 open software_summary;
180  		 fetch software_summary into record;
181  
182  		 -- If no records returned, throw error
183  		 if not software_summary%found then
184  		     raise_application_error(-20003, 'No records found.');
185  		 end if;
186  
187  		 -- If records found, loop and print output
188  		 while software_summary%found loop
189  
190  		     dbms_output.put_line(
191  			 record.software_name || ': ' || record.use_count
192  		     );
193  		     fetch software_summary into record;
194  
195  		 end loop;
196  		 close software_summary;
197  	     end;
198  	 end;
199  
200  
201  	 -- p7. softwareLicenses ----------------------------------
202  
203  	 procedure softwareLicenses (
204  	     keyword_in varchar default null,
205  	     subject_in varchar default null
206  	 ) as
207  	     cursor license_table is
208  		 select
209  		     sl.name as license_name,
210  		     count(distinct d.ds_id) as use_count
211  		 from dataset d, software_license sl, keywords k, subjects s
212  		 where d.sw_lic_ID = sl.sw_lic_ID
213  		     and d.ds_id = k.ds_id
214  		     and d.ds_id = s.ds_id
215  		     and (keyword_in is null or keyword_in = k.keyword)
216  		     and (subject_in is null or subject_in = s.subject)
217  		 group by sl.name
218  		 order by use_count desc;
219  
220  	     -- Declare variables
221  	     input_check int;
222  	     record license_table%rowtype;
223  
224  	 begin
225  	     -- Make sure keyword_in is valid
226  	     if keyword_in is not null then
227  		 begin
228  		     select count(*)
229  		     into input_check
230  		     from keywords
231  		     where keyword = keyword_in;
232  		 exception
233  		     when no_data_found then
234  			 raise_application_error(-20001, 'Keyword not found.');
235  		 end;
236  	     end if;
237  
238  	     -- Make sure subject_in is valid
239  	     if subject_in is not null then
240  		 begin
241  		     select count(*)
242  		     into input_check
243  		     from subjects
244  		     where subject = subject_in;
245  		 exception
246  		     when no_data_found then
247  			 raise_application_error(-20002, 'Subject not found.');
248  		 end;
249  	     end if;
250  
251  	     -- Print from cursor
252  	     begin
253  		 open license_table;
254  		 fetch license_table into record;
255  
256  		 -- If no records returned, throw error
257  		 if not license_table%found then
258  		     raise_application_error(-20003, 'No records found.');
259  		 end if;
260  
261  		 -- If records found, loop and print output
262  		 while license_table%found loop
263  
264  		     dbms_output.put_line(
265  			 record.license_name || ': ' || record.use_count
266  		     );
267  		     fetch license_table into record;
268  
269  		 end loop;
270  		 close license_table;
271  	     end;
272  	 end;
273  
274  
275  	 -- p8. funderSummary ----------------------------------------
276  
277  	 procedure funderSummary (
278  	     agency_name_in in varchar default null,
279  	     subject_in in varchar default null
280  	 ) as
281  	     -- Declare cursor
282  	     cursor agency_table is
283  		 select
284  		     fa.name as name,
285  		     count(distinct p.pub_id) as pub_count,
286  		     sum(d.file_downloads) as downloads,
287  		     sum(g.amount) as total_funded
288  		 from
289  		     dataset d,
290  		     funds f,
291  		     funding_agency fa,
292  		     subjects s,
293  		     publication p,
294  		     grants g
295  		 where
296  		     d.ds_id = s.ds_id
297  		     and d.ds_id = f.ds_id
298  		     and f.agency_id = fa.agency_id
299  		     and d.ds_id = p.ds_id
300  		     and g.grant_id = f.grant_id
301  		     and (agency_name_in is null or agency_name_in = fa.name)
302  		     and (subject_in is null or subject_in = s.subject)
303  		 group by fa.name
304  		 order by fa.name;
305  
306  	     -- Declare variables
307  	     input_check int;
308  	     record agency_table%rowtype;
309  
310  	 begin
311  
312  	     -- Make sure agency name in is valid
313  	     if agency_name_in is not null then
314  		 begin
315  		     select count(*)
316  		     into input_check
317  		     from funding_agency
318  		     where name = agency_name_in;
319  		 exception
320  		     when no_data_found then
321  			 raise_application_error(-20001, 'Agency not found.');
322  		 end;
323  	     end if;
324  
325  	     -- Make sure subject_in is valid
326  	     if subject_in is not null then
327  		 begin
328  		     select count(*)
329  		     into input_check
330  		     from subjects
331  		     where subject = subject_in;
332  		 exception
333  		     when no_data_found then
334  			 raise_application_error(-20002, 'Subject not found.');
335  		 end;
336  	     end if;
337  
338  	     -- Print from cursor
339  	     begin
340  		 open agency_table;
341  		 fetch agency_table into record;
342  
343  		 -- If no records returned, throw error
344  		 if not agency_table%found then
345  		     raise_application_error(-20003, 'No records found.');
346  		 end if;
347  
348  		 -- If records found, loop and print output
349  		 while agency_table%found loop
350  
351  		     dbms_output.put_line(
352  			 record.name || ': ' ||
353  			 'Publications - ' || record.pub_count ||
354  			 '. Downloads - ' || record.downloads ||
355  			 '. Total Funded -  ' || record.total_funded || '.'
356  		     );
357  		     fetch agency_table into record;
358  
359  		 end loop;
360  		 close agency_table;
361  	     end;
362  
363  	 end;
364  
365  
366  	 -- p9: searchAuthors --------------------------------------
367  
368  	 procedure searchAuthors (search_term varchar) as
369  	     -- Define cursor
370  	     cursor author_matches is
371  		 select ru.name as name
372  		 from users u, registered_user ru, author a
373  		 where u.u_id = ru.u_id
374  		     and ru.ru_id = a.ru_id
375  		     and lower(ru.name) like '%' || lower(search_term) || '%';
376  
377  	     -- Define variables
378  	     record author_matches%rowtype;
379  
380  	 begin
381  	     -- Open cursor, fetch into record
382  	     open author_matches;
383  	     fetch author_matches into record;
384  
385  	     -- If no records returned, throw error
386  	     if not author_matches%found then
387  		 raise_application_error(-20001, 'No records found.');
388  	     end if;
389  
390  	     -- If records found, loop and print
391  	     while author_matches%found loop
392  		 dbms_output.put_line(record.name);
393  		 fetch author_matches into record;
394  
395  	     -- Close loop and cursor
396  	     end loop;
397  	     close author_matches;
398  
399  	 end;
400  
401  
402  	 -- f1. fundingDistribution --------------------------------
403  
404  	 function fundingDistribution(
405  		 agency_in in varchar default null,
406  		 agency_id_in in int default null,
407  		 col_in in varchar default null,
408  		 col_id_in in int default null
409  	 ) return number
410  	 as
411  	     agency_condition varchar(100);
412  	     col_condition varchar(100);
413  	     query varchar(2000);
414  	     n_rows int;
415  	     result number(6, 2);
416  	 begin
417  
418  	     -- Make sure there is at least one agency arg and at least one col arg
419  	     if agency_in is null and agency_id_in is null then
420  		 raise_application_error(
421  		     -20001,
422  		     'Please provide either an agency name or agency id.'
423  		 );
424  	     elsif col_in is null and col_id_in is null then
425  		 raise_application_error(
426  		     -20002,
427  		     'Please provide either a collection name or collection id.'
428  		 );
429  	     end if;
430  
431  	     -- Agency condition for dynamic query
432  	     if agency_in is not null then
433  		 agency_condition := 'fa.name = ''' || agency_in || '''';
434  	     else
435  		 agency_condition := 'fa.agency_ID = ''' || agency_id_in || '''';
436  	     end if;
437  
438  	     -- Collection condition for dynamic query
439  	     if col_in is not null then
440  		 col_condition := 'c.title = ''' || col_in || '''';
441  	     else
442  		 col_condition := 'c.col_ID = ''' || col_id_in || '''';
443  	     end if;
444  
445  	     -- Dynamic query. If 0, return an error. (agency does not fund in that col)
446  	     query :=
447  		 'select count(*)
448  		 from funding_agency fa, funds f, dataset d, collection c
449  		    where ' || agency_condition || '
450  		     and ' || col_condition || '
451  		     and fa.agency_ID = f.agency_ID
452  		     and f.ds_ID = d.ds_ID
453  		     and d.col_ID = c.col_ID';
454  	     execute immediate query into n_rows;
455  
456  	     -- If no rows returned, throw error
457  	     if n_rows = 0 then
458  		 raise_application_error(
459  		     -20003,
460  		     'No matching records found. No agency funding within that collection.'
461  		 );
462  	     end if;
463  
464  	     -- Dynamic query to get prop of datasets in collection sponsored by agency
465  	     query :=
466  		 'select sum(case when ' || agency_condition || ' then 1 else 0 end) / count(*)
467  		 from funding_agency fa, funds f, dataset d, collection c
468  		 where ' || col_condition || '
469  		     and fa.agency_ID = f.agency_ID
470  		     and f.ds_ID = d.ds_ID
471  		     and d.col_ID = c.col_ID';
472  
473  	     -- Run query and return result
474  	     execute immediate query into result;
475  	     return result;
476  
477  	 end;
478  
479  	     -- f2. --------------------------------------------------------
480  	     -- check if the hash of the provided password matches the
481  	     -- hash stored in the registered_user table
482  	     -- hashed using SHA-256
483  	     FUNCTION userLoginAttempt(
484  		     user_ID IN int DEFAULT -1,
485  		     password IN CHAR
486  	     ) RETURN number
487  	     AS
488  		     old_hash CHAR(64);
489  		     new_hash CHAR(64);
490  		     user_count number := 0;
491  	     BEGIN
492  		     -- verify that requested user exists
493  		     SELECT COUNT(*)
494  			     INTO user_count
495  		     FROM registered_user
496  		     WHERE ru_ID=user_ID;
497  		     IF user_count != 1 THEN
498  			     RETURN 0; -- No such user exists
499  		     END IF;
500  
501  		     -- hash the password provided to this function
502  		     SELECT STANDARD_HASH(RTRIM(password), 'SHA256')
503  			     INTO new_hash
504  			     FROM dual;
505  		     SELECT pw_hash
506  			     INTO old_hash
507  			     FROM registered_user
508  		     WHERE ru_ID=user_ID;
509  		     IF new_hash = old_hash THEN
510  			     RETURN 1; -- passwords match, successful login
511  		     ELSE
512  			     RETURN 0; -- unsuccessful login
513  		     END IF;
514  	     END;
515  
516  	     -- f3. -------------------------------------------------------
517  	     -- If the given user exists within registered_user
518  	     -- randomly generate a new password that is alphanumeric
519  	     -- and 8 characters long. Verify that it does not match the hash
520  	     -- of the previous password. Set this new hash within registered_user
521  	     -- and return the new password value.
522  	     FUNCTION generateNewPassword(
523  		     user_ID IN int DEFAULT -1
524  	     ) RETURN CHAR
525  	     AS
526  		     user_count number := 0;
527  		     old_hash CHAR(64);
528  		     new_pw CHAR(8);
529  		     new_pw_hash CHAR(64);
530  	     BEGIN
531  		     -- Check for existence of said user
532  		     SELECT COUNT(*)
533  			     INTO user_count
534  		     FROM registered_user
535  		     WHERE ru_ID=user_ID;
536  		     IF user_count <> 1 THEN
537  			     RAISE_APPLICATION_ERROR(-20500, 'User does not exist');
538  		     END IF;
539  
540  		     -- Generate new random password and check against previous hash
541  		     new_pw := DBMS_RANDOM.STRING('x', 8);
542  		     SELECT STANDARD_HASH(RTRIM(new_pw), 'SHA256')
543  			     INTO new_pw_hash
544  			     FROM dual;
545  		     SELECT pw_hash
546  			     INTO old_hash
547  			     FROM registered_user
548  			     WHERE ru_ID=user_ID;
549  		     WHILE old_hash = new_pw_hash
550  		     LOOP
551  			     new_pw := DBMS_RANDOM.STRING('x', 8);
552  		     SELECT STANDARD_HASH(RTRIM(new_pw), 'SHA256')
553  			     INTO new_pw_hash
554  			     FROM dual;
555  		     END LOOP;
556  		     RETURN new_pw;
557  	     END;
558  
559  	     -- f4. -------------------------------------------------------
560  	     -- search has been moved to extra_routines.sql to resolve
561  	     -- an issue with a custom table type that it depends on
562  
563  
564  	 -- f5. datasetActivity ---------------------------------------
565  
566  	 function datasetActivity(
567  		 id in varchar default null,
568  		 start_date in date default null,
569  		 end_date in date default null
570  	 ) return number
571  	 as
572  	     start_timestamp timestamp;
573  	     end_timestamp timestamp;
574  	     diff_days number;
575  	     downloads_in_window int;
576  	     activity number(6, 3);
577  	 begin
578  
579  	     -- Make sure id is provided
580  	     if id is null then
581  		 raise_application_error(-20001, 'Please provide a dataset ID.');
582  	     end if;
583  
584  	     -- If no start date, use pub_date from dataset, else just convert to timestamp
585  	     if start_date is null then
586  		 select cast(pub_date as timestamp)
587  		 into start_timestamp
588  		 from dataset
589  		 where ds_ID = id;
590  	     else
591  		 start_timestamp := cast(start_date as timestamp);
592  	     end if;
593  
594  	     -- If no end date, use current timestamp
595  	     if end_date is null then
596  		 select current_timestamp
597  		 into end_timestamp
598  		 from dual;
599  	     else
600  		 end_timestamp := cast(end_date as timestamp);
601  	     end if;
602  
603  	     -- Calculate how many days are between start and end
604  	     diff_days := extract(day from (end_timestamp - start_timestamp));
605  
606  	     -- Get downloads in that time
607  	     select count(*)
608  	     into downloads_in_window
609  	     from dataset_download
610  	     where ds_ID = id
611  		 and timestamp > start_timestamp
612  		 and timestamp <= end_timestamp;
613  
614  	     -- Calculate downloads per day in that window
615  	     activity := downloads_in_window / diff_days;
616  	     return activity;
617  
618  	 end;
619  
620  
621  	 -- f6. proportionGPL -----------------------------------
622  
623  	 function proportionGPL(
624  	     subject_in in varchar default null
625  	 ) return number
626  	 as
627  	     dummy int := 0;
628  	     prop_gpl number(4, 2);
629  	 begin
630  
631  	     -- If no input, get prop for whole database
632  	     if subject_in is null then
633  		 select sum(case when sw.name = 'GPL-3.0' then 1 else 0 end) / count(*)
634  		 into prop_gpl
635  		 from software_license sw, dataset d
636  		 where sw.sw_lic_ID = d.sw_lic_ID;
637  		 return prop_gpl;
638  
639  	     -- Prop by subject
640  	     elsif subject_in is not null then
641  
642  		 -- Check whether subject is in subjects table
643  		 begin
644  		     select count(*)
645  		     into dummy
646  		     from subjects
647  		     where subject = subject_in;
648  		 exception
649  		     when no_data_found then
650  			 dummy := 0;
651  		 end;
652  
653  		 -- If dummy is 1 (subject exists), run function and return
654  		 if dummy >= 1 then
655  		     select sum(case when sw.name = 'GPL-3.0' then 1 else 0 end) / count(*)
656  		     into prop_gpl
657  		     from software_license sw, dataset d, subjects s
658  		     where s.ds_ID = d.ds_ID
659  			 and sw.sw_lic_ID = d.sw_lic_ID
660  			 and subject_in = s.subject;
661  		     return prop_gpl;
662  
663  		 -- If dummy is 0, (no subject), throw error
664  		 elsif dummy = 0 then
665  		     raise_application_error(
666  			 -20001,
667  			 'Subject not found in Dataverse.'
668  		     );
669  		 end if;
670  
671  	     end if;
672  	 end;
673  
674  
675  	 -- f7. fundingImpact --------------------------------------
676  
677  	 function fundingImpact(
678  	     grant_id_in in int default null,
679  	     agency_name_in in varchar default null,
680  	     metric in varchar default null
681  	 ) return varchar
682  	 as
683  	     row_check int;
684  	     conditions varchar(1000);
685  	     query varchar(1000);
686  	     result int;
687  	 begin
688  
689  	     -- Make sure is either a grant id or name input
690  	     if grant_id_in is null and agency_name_in is null then
691  		 raise_application_error(
692  		     -20001,
693  		     'Please provide either a grant ID or a funding agency name.'
694  		 );
695  	     end if;
696  
697  	     -- Metric input can either be publications or downloads
698  	     if metric not in ('publications', 'downloads') then
699  		 raise_application_error(
700  		     -20002,
701  		     'Please provide a metric as either "publications" or "downloads".'
702  		 );
703  	     end if;
704  
705  	     -- If both agency id and grant number are used, make sure they coincide
706  	     if grant_id_in is not null and agency_name_in is not null then
707  		 select count(*)
708  		 into row_check
709  		 from dataset d, funds f, funding_agency fa
710  		 where d.ds_id = f.ds_ID
711  		     and f.agency_ID = fa.agency_ID
712  		     and f.grant_ID = grant_id_in
713  		     and fa.name = agency_name_in;
714  		 if row_check = 0 then
715  		     raise_application_error(-20003, 'No records found.');
716  		 end if;
717  	     end if;
718  
719  	     -- Conditions based on inputs to use in query
720  	     conditions := '';
721  
722  	     if grant_id_in is not null then
723  		 conditions := conditions || ' and f.grant_ID = ''' || grant_id_in || '''';
724  	     end if;
725  
726  	     if agency_name_in is not null then
727  		 conditions := conditions || ' and fa.name = ''' || agency_name_in || '''';
728  	     end if;
729  
730  	     -- If metric is publications, create query
731  	     if metric = 'publications' then
732  
733  		 query :=
734  		     'select count(*)
735  		     from dataset d, publication p, funds f, funding_agency fa
736  		     where d.ds_ID = p.ds_ID
737  			 and d.ds_ID = f.ds_ID
738  			 and fa.agency_ID = f.agency_ID
739  			 ' || conditions;
740  
741  	     -- If metric is downloads, create query
742  	     elsif metric = 'downloads' then
743  
744  		 query :=
745  		     'select sum(d.file_downloads)
746  		     from dataset d, funds f, funding_agency fa
747  		     where d.ds_ID = f.ds_ID
748  			 and f.agency_ID = fa.agency_ID
749  			 ' || conditions;
750  
751  	     end if;
752  
753  	     -- Execute query
754  	     execute immediate query into result;
755  	     return result;
756  
757  	 end;
758  
759  
760  	 -- f8. totalSize -------------------------------------------------
761  
762  	 function totalSize(
763  	     scope in varchar default null,
764  	     id in varchar default null
765  	 ) return number
766  	 as
767  	     TOTALSIZE number;
768  	     IDCHECK int := 0;
769  	 begin
770  	     -- Checking bad inputs --------
771  	     -- if user gives id but not scope, throw error
772  	     if scope is null and id is not null then
773  		 raise_application_error(
774  		     -20001,
775  		     'If scope is specified, id must be provided.'
776  		 );
777  
778  	     -- if scope but no id, also error
779  	     elsif scope is not null and id is null then
780  		 raise_application_error(
781  		     -20001,
782  		     'If id is specified, scope must be provided.'
783  		 );
784  
785  	     -- if no inputs, get filesize of whole dataverse
786  	     elsif scope is null and id is null then
787  		 select sum(filesize)
788  		 into TOTALSIZE
789  		 from files;
790  		 return TOTALSIZE;
791  
792  	     -- Check that scope input is one of three available options
793  	     elsif scope not in ('dataset', 'collection', 'dataverse') then
794  		 raise_application_error(
795  		     -20001,
796  		     'Input for scope must be dataset, collection, or dataverse'
797  		 );
798  	     end if;
799  
800  
801  	     -- Start calculations based on scope now --------
802  	     -- dataset
803  	     if scope = 'dataset' then
804  
805  		 -- Save a 1/0 value for whether the id exists
806  		 begin
807  		     select 1
808  		     into IDCHECK
809  		     from dataset
810  		     where ds_ID = id;
811  
812  		 -- include exception to set IDCHECK to 0 if nothing found
813  		 exception
814  		     when NO_DATA_FOUND then
815  			 IDCHECK := 0;
816  		 end;
817  
818  		 -- if id exists, calculate total size
819  		 if IDCHECK = 1 then
820  		     select sum(filesize)
821  		     into TOTALSIZE
822  		     from files
823  		     where ds_ID = id;
824  
825  		 -- if id does not exist, throw error
826  		 elsif IDCHECK = 0 then
827  		     raise_application_error(
828  			 -20001,
829  			 'ds_ID is not found in dataset table.'
830  		     );
831  
832  		 end if;
833  	     end if;
834  
835  	     -- collection
836  	     if scope = 'collection' then
837  		 begin
838  		     select 1
839  		     into IDCHECK
840  		     from collection
841  		     where col_ID = id;
842  		 exception
843  		     when NO_DATA_FOUND then
844  			 IDCHECK := 0;
845  		 end;
846  
847  		 if IDCHECK = 1 then
848  		     select sum(f.filesize)
849  		     into TOTALSIZE
850  		     from files f, dataset d, collection c
851  		     where c.col_ID = d.col_ID
852  			 and d.ds_ID = f.ds_ID
853  			 and c.col_ID = id;
854  
855  		 elsif IDCHECK = 0 then
856  		     raise_application_error(
857  			 -20001,
858  			 'col_ID is not found in collection table.'
859  		     );
860  
861  		 end if;
862  	     end if;
863  
864  	     -- dataverse
865  	     if scope = 'dataverse' then
866  		 begin
867  		     select 1
868  		     into IDCHECK
869  		     from root_dataverse
870  		     where root_ID = id;
871  		 exception
872  		     when NO_DATA_FOUND then
873  			 IDCHECK := 0;
874  		 end;
875  
876  		 if IDCHECK = 1 then
877  		     select sum(f.filesize)
878  		     into TOTALSIZE
879  		     from files f, dataset d, collection c, root_dataverse r
880  		     where f.ds_ID = d.ds_ID
881  			 and d.col_ID = c.col_ID
882  			 and c.root_ID = r.root_ID
883  			 and r.root_ID = id;
884  
885  		 elsif IDCHECK = 0 then
886  		     raise_application_error(
887  			 -20001,
888  			 'root_ID is not found in root_dataverse table.'
889  		     );
890  
891  		 end if;
892  	     end if;
893  
894  	     return TOTALSIZE;
895  	 end;
896  
897  
898  end dataverse;
899  /

Package body created.

SQL> 
SQL> show errors
No errors.
SQL> 
SQL> commit;

Commit complete.

SQL> SQL> 
SQL> 
SQL> -- Restore options --------------------------------------------
SQL> 
SQL> spool off
