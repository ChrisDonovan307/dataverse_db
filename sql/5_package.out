SQL> 
SQL> 
SQL> -- Execute scripts  -------------------------------------------
SQL> 
SQL> start &&1
SQL> -- Package --------------------------------------------------------
SQL> 
SQL> create or replace package dataverse as
  2  	     TYPE strings_t IS TABLE OF VARCHAR2 (100);
  3  
  4  	 -- Procedures
  5  	     PROCEDURE findPubsByAuthor(
  6  		     authorName IN VARCHAR
  7  	     );
  8  
  9  	     PROCEDURE findDataSetsByAuthor(
 10  		     authorName IN VARCHAR
 11  	     );
 12  
 13  	     PROCEDURE dumpEmptyFiles;
 14  
 15  	     PROCEDURE keywordSummary(
 16  		     dataset in VARCHAR
 17  	     );
 18  
 19  	     PROCEDURE cleanKeywords(
 20  		     kw IN VARCHAR,
 21  		     aliases IN strings_t
 22  	     );
 23  
 24  	 procedure softwareUse(
 25  	     keyword_in varchar default null,
 26  	     subject_in varchar default null
 27  	 );
 28  	 procedure softwareLicenses(
 29  	     keyword_in varchar default null,
 30  	     subject_in varchar default null
 31  	 );
 32  	 procedure funderSummary(
 33  	     agency_name_in varchar default null,
 34  	     subject_in varchar default null
 35  	 );
 36  	 procedure searchAuthors(
 37  	     search_term varchar
 38  	 );
 39  
 40  	 -- Functions
 41  	     FUNCTION userLoginAttempt(
 42  		     user_ID IN int DEFAULT -1,
 43  		     password IN CHAR
 44  	     ) RETURN number;
 45  
 46  	     FUNCTION generateNewPassword(
 47  		     user_ID IN int DEFAULT -1
 48  	     ) RETURN CHAR;
 49  
 50  	     FUNCTION search(
 51  		     searchString IN VARCHAR
 52  	     ) RETURN strings_t;
 53  
 54  	 function fundingDistribution(
 55  	     agency_in in varchar default null,
 56  	     agency_id_in in int default null,
 57  	     col_in in varchar default null,
 58  	     col_id_in in int default null
 59  	 ) return number;
 60  
 61  	 function datasetActivity(
 62  	     id in varchar default null,
 63  	     start_date in date default null,
 64  	     end_date in date default null
 65  	 ) return number;
 66  
 67  	 function proportionGPL(
 68  	     subject_in varchar default null
 69  	 ) return number;
 70  
 71  	 function fundingImpact(
 72  	     grant_id_in in int default null,
 73  	     agency_name_in in varchar default null,
 74  	     metric in varchar default null
 75  	 ) return varchar;
 76  
 77  	 function totalSize(
 78  	     scope in varchar default null,
 79  	     id in varchar default null
 80  	 ) return number;
 81  
 82  end dataverse;
 83  /

Package created.

SQL> 
SQL> 
SQL> -- Body ------------------------------------------------------------
SQL> 
SQL> create or replace package body dataverse as
  2  
  3  	 -- Procedures --------------------------------------------------
  4  
  5  	     -- p1. findPubsByAuthor ----------------------------------------
  6  	     -- find all publications that list a given author
  7  	     PROCEDURE findPubsByAuthor(
  8  		     authorName IN VARCHAR
  9  	     )
 10  	     AS
 11  		     CURSOR pub IS
 12  			     SELECT pub_ID, citation, url
 13  		     FROM publication
 14  		     WHERE citation LIKE '%' || authorName || '%''';
 15  		     pub_record pub%ROWTYPE;
 16  	     BEGIN
 17  		     OPEN pub;
 18  		     FETCH pub INTO pub_record;
 19  		     WHILE pub%FOUND
 20  		     LOOP
 21  			     DBMS_OUTPUT.PUT_LINE(authorName || ' contributed to, ' || pub_record.pub_ID || ', '
 22  		     || pub_record.url || ', ' || pub_record.citation);
 23  		     END LOOP;
 24  		     CLOSE pub;
 25  	     END;
 26  
 27  	     -- p2. ---------------------------------------------------------
 28  	     -- Find all datasets that list a specified author and display information
 29  	     -- on those datasets in the form ds_ID, title, and url
 30  	     PROCEDURE findDataSetsByAuthor(
 31  		     authorName IN VARCHAR
 32  	     )
 33  	     AS
 34  		     CURSOR ds IS
 35  			     SELECT d.ds_ID, d.title, d.url
 36  		     FROM publication p, dataset d
 37  		     WHERE citation LIKE '%' || authorName || '%'''
 38  			     AND p.ds_ID = d.ds_ID;
 39  		     ds_record ds%ROWTYPE;
 40  	     BEGIN
 41  		     OPEN ds;
 42  		     FETCH ds INTO ds_record;
 43  		     WHILE ds%FOUND
 44  		     LOOP
 45  			     DBMS_OUTPUT.PUT_LINE(authorName || ' contributed to, ' || ds_record.ds_ID || ', '
 46  		     || ds_record.title || ', ' || ds_record.url);
 47  		     FETCH ds INTO ds_record;
 48  		     END LOOP;
 49  		     CLOSE ds;
 50  	     END;
 51  
 52  	     -- p3. ---------------------------------------------------------
 53  	     -- Need to create a secondary table to store the empty files
 54  	     -- before they are fully deleted.
 55  	     -- Included here for reference, but should not be executed along with procedures
 56  	     -- CREATE TABLE empty_files AS SELECT * FROM files;
 57  	     PROCEDURE dumpEmptyFiles
 58  	     AS
 59  		     CURSOR f IS
 60  			     SELECT * FROM files WHERE filesize <= 0;
 61  		     f_record f%ROWTYPE;
 62  	     BEGIN
 63  		     OPEN f;
 64  			     FETCH f INTO f_record;
 65  		     WHILE f%FOUND
 66  		     LOOP
 67  			     INSERT INTO empty_files VALUES(f_record.file_ID, f_record.ds_ID, f_record.filetype,
 68  			     f_record.filesize, f_record.title, f_record.description, f_record.downloads, f_record.pub_date);
 69  			     FETCH f INTO f_record;
 70  		     END LOOP;
 71  		     CLOSE f;
 72  	     END;
 73  
 74  	     -- p4. ---------------------------------------------------------
 75  	     -- Search through the keywords within a dataset and generate a summary
 76  	     -- table listing each keyword by its count (descending)
 77  	     --CREATE TABLE keyword_count (keyword VARCHAR(100), count_of number);
 78  	     PROCEDURE keywordSummary(
 79  		     dataset in VARCHAR
 80  	     )
 81  	     AS
 82  		     CURSOR kw IS
 83  			     SELECT keyword FROM keywords
 84  			     WHERE ds_ID = dataset;
 85  		     kw_record kw%ROWTYPE;
 86  		     kw_count number;
 87  		     kw_rec_count number;
 88  	     BEGIN
 89  		     OPEN kw;
 90  			     FETCH kw INTO kw_record;
 91  		     WHILE kw%FOUND
 92  		     LOOP
 93  			     SELECT COUNT(*)
 94  				     INTO kw_count
 95  				     FROM keywords
 96  				     WHERE keyword=kw_record.keyword;
 97  			     -- Has this keyword already been counted?
 98  				     SELECT COUNT(*)
 99  				     INTO kw_rec_count
100  				     FROM keyword_count
101  				     WHERE keyword=kw_record.keyword;
102  				     IF kw_rec_count = 0 THEN
103  			     INSERT INTO keyword_count VALUES(kw_record.keyword, kw_count);
104  			     -- Is the current count consistent with records?
105  			     ELSE
106  				     SELECT count_of
107  				     INTO kw_rec_count
108  				     FROM keyword_count
109  					     WHERE keyword=kw_record.keyword;
110  			     IF kw_count != kw_rec_count THEN
111  				     UPDATE keyword_count SET count_of=kw_count
112  					     WHERE keyword=kw_record.keyword;
113  			     END IF;
114  				     END IF;
115  			     FETCH kw INTO kw_record;
116  		     END LOOP;
117  		     CLOSE kw;
118  	     END;
119  
120  	     -- p5. ---------------------------------------------------------
121  	     -- Accepts a single keyword string and a list of alias strings
122  	     -- Consolidate all instances of aliases within the keywords table
123  	     -- to exactly match the provided keyword
124  	     PROCEDURE cleanKeywords(
125  		     kw IN VARCHAR,
126  		     aliases IN strings_t
127  	     )
128  	     AS
129  		     CURSOR ds IS
130  			     SELECT ds_ID FROM keywords;
131  		     ds_record ds%ROWTYPE;
132  		     match_count number;
133  		     a_record VARCHAR(100);
134  	     BEGIN
135  		     -- check all alias strings
136  		     FOR i IN aliases.FIRST..aliases.LAST
137  		     LOOP
138  			     a_record := aliases(i);
139  		     -- check for each dataset to prevent duplicate primary keys
140  			     OPEN ds;
141  		     FETCH ds INTO ds_record;
142  		     WHILE ds%FOUND
143  		     LOOP
144  			     SELECT COUNT(*)
145  				     INTO match_count
146  			     FROM keywords
147  			     WHERE keyword = kw AND ds_ID = ds_record.ds_ID;
148  				     -- If this dataset already contains a reference to the desired keyword
149  			     -- then simply delete the record containing this alias
150  			     IF match_count > 0 THEN
151  					     DELETE FROM keywords WHERE keyword = a_record;
152  			     -- otherwise update the record so that alias becomes kw
153  			     ELSE
154  				     UPDATE keywords
155  			     SET keyword = kw
156  			     WHERE keyword = a_record;
157  			     END IF;
158  			     FETCH ds INTO ds_record;
159  		     END LOOP;
160  		     CLOSE ds;
161  		     END LOOP;
162  	     END;
163  
164  	 -- p6. softwareUse ---------------------------------------------
165  
166  	 procedure softwareUse (
167  	     keyword_in in varchar default null,
168  	     subject_in in varchar default null
169  	 ) as
170  	     -- Define cursor
171  	     cursor software_summary is
172  		 select
173  		     s.name as software_name,
174  		     count(distinct d.ds_id) as use_count
175  		 from dataset d, analyzes a, software s, keywords k, subjects su
176  		 where d.ds_id = a.ds_id
177  		     and a.sw_id = s.sw_id
178  		     and d.ds_id = k.ds_id
179  		     and d.ds_id = su.ds_id
180  		     and (keyword_in is null or keyword_in = k.keyword)
181  		     and (subject_in is null or subject_in = su.subject)
182  		 group by s.name
183  		 order by use_count desc;
184  
185  	     -- Declare variables
186  	     input_check int;
187  	     record software_summary%rowtype;
188  
189  	 begin
190  
191  	     -- Make sure keyword_in is valid
192  	     if keyword_in is not null then
193  		 begin
194  		     select count(*)
195  		     into input_check
196  		     from keywords
197  		     where keyword = keyword_in;
198  		 exception
199  		     when no_data_found then
200  			 raise_application_error(-20001, 'Keyword not found.');
201  		 end;
202  	     end if;
203  
204  	     -- Make sure subject_in is valid
205  	     if subject_in is not null then
206  		 begin
207  		     select count(*)
208  		     into input_check
209  		     from subjects
210  		     where subject = subject_in;
211  		 exception
212  		     when no_data_found then
213  			 raise_application_error(-20002, 'Subject not found.');
214  		 end;
215  	     end if;
216  
217  	     -- Print from cursor
218  	     begin
219  		 open software_summary;
220  		 fetch software_summary into record;
221  
222  		 -- If no records returned, throw error
223  		 if not software_summary%found then
224  		     raise_application_error(-20003, 'No records found.');
225  		 end if;
226  
227  		 -- If records found, loop and print output
228  		 while software_summary%found loop
229  
230  		     dbms_output.put_line(
231  			 record.software_name || ': ' || record.use_count
232  		     );
233  		     fetch software_summary into record;
234  
235  		 end loop;
236  		 close software_summary;
237  	     end;
238  	 end;
239  
240  
241  	 -- p7. softwareLicenses ----------------------------------
242  
243  	 procedure softwareLicenses (
244  	     keyword_in varchar default null,
245  	     subject_in varchar default null
246  	 ) as
247  	     cursor license_table is
248  		 select
249  		     sl.name as license_name,
250  		     count(distinct d.ds_id) as use_count
251  		 from dataset d, software_license sl, keywords k, subjects s
252  		 where d.sw_lic_ID = sl.sw_lic_ID
253  		     and d.ds_id = k.ds_id
254  		     and d.ds_id = s.ds_id
255  		     and (keyword_in is null or keyword_in = k.keyword)
256  		     and (subject_in is null or subject_in = s.subject)
257  		 group by sl.name
258  		 order by use_count desc;
259  
260  	     -- Declare variables
261  	     input_check int;
262  	     record license_table%rowtype;
263  
264  	 begin
265  	     -- Make sure keyword_in is valid
266  	     if keyword_in is not null then
267  		 begin
268  		     select count(*)
269  		     into input_check
270  		     from keywords
271  		     where keyword = keyword_in;
272  		 exception
273  		     when no_data_found then
274  			 raise_application_error(-20001, 'Keyword not found.');
275  		 end;
276  	     end if;
277  
278  	     -- Make sure subject_in is valid
279  	     if subject_in is not null then
280  		 begin
281  		     select count(*)
282  		     into input_check
283  		     from subjects
284  		     where subject = subject_in;
285  		 exception
286  		     when no_data_found then
287  			 raise_application_error(-20002, 'Subject not found.');
288  		 end;
289  	     end if;
290  
291  	     -- Print from cursor
292  	     begin
293  		 open license_table;
294  		 fetch license_table into record;
295  
296  		 -- If no records returned, throw error
297  		 if not license_table%found then
298  		     raise_application_error(-20003, 'No records found.');
299  		 end if;
300  
301  		 -- If records found, loop and print output
302  		 while license_table%found loop
303  
304  		     dbms_output.put_line(
305  			 record.license_name || ': ' || record.use_count
306  		     );
307  		     fetch license_table into record;
308  
309  		 end loop;
310  		 close license_table;
311  	     end;
312  	 end;
313  
314  
315  	 -- p8. funderSummary ----------------------------------------
316  
317  	 procedure funderSummary (
318  	     agency_name_in in varchar default null,
319  	     subject_in in varchar default null
320  	 ) as
321  	     -- Declare cursor
322  	     cursor agency_table is
323  		 select
324  		     fa.name as name,
325  		     count(distinct p.pub_id) as pub_count,
326  		     sum(d.file_downloads) as downloads,
327  		     sum(g.amount) as total_funded
328  		 from
329  		     dataset d,
330  		     funds f,
331  		     funding_agency fa,
332  		     subjects s,
333  		     publication p,
334  		     grants g
335  		 where
336  		     d.ds_id = s.ds_id
337  		     and d.ds_id = f.ds_id
338  		     and f.agency_id = fa.agency_id
339  		     and d.ds_id = p.ds_id
340  		     and g.grant_id = f.grant_id
341  		     and (agency_name_in is null or agency_name_in = fa.name)
342  		     and (subject_in is null or subject_in = s.subject)
343  		 group by fa.name
344  		 order by fa.name;
345  
346  	     -- Declare variables
347  	     input_check int;
348  	     record agency_table%rowtype;
349  
350  	 begin
351  
352  	     -- Make sure agency name in is valid
353  	     if agency_name_in is not null then
354  		 begin
355  		     select count(*)
356  		     into input_check
357  		     from funding_agency
358  		     where name = agency_name_in;
359  		 exception
360  		     when no_data_found then
361  			 raise_application_error(-20001, 'Agency not found.');
362  		 end;
363  	     end if;
364  
365  	     -- Make sure subject_in is valid
366  	     if subject_in is not null then
367  		 begin
368  		     select count(*)
369  		     into input_check
370  		     from subjects
371  		     where subject = subject_in;
372  		 exception
373  		     when no_data_found then
374  			 raise_application_error(-20002, 'Subject not found.');
375  		 end;
376  	     end if;
377  
378  	     -- Print from cursor
379  	     begin
380  		 open agency_table;
381  		 fetch agency_table into record;
382  
383  		 -- If no records returned, throw error
384  		 if not agency_table%found then
385  		     raise_application_error(-20003, 'No records found.');
386  		 end if;
387  
388  		 -- If records found, loop and print output
389  		 while agency_table%found loop
390  
391  		     dbms_output.put_line(
392  			 record.name || ': ' ||
393  			 'Publications - ' || record.pub_count ||
394  			 '. Downloads - ' || record.downloads ||
395  			 '. Total Funded -  ' || record.total_funded || '.'
396  		     );
397  		     fetch agency_table into record;
398  
399  		 end loop;
400  		 close agency_table;
401  	     end;
402  
403  	 end;
404  
405  
406  	 -- p9: searchAuthors --------------------------------------
407  
408  	 procedure searchAuthors (search_term varchar) as
409  	     -- Define cursor
410  	     cursor author_matches is
411  		 select ru.name as name
412  		 from users u, registered_user ru, author a
413  		 where u.u_id = ru.u_id
414  		     and ru.ru_id = a.ru_id
415  		     and lower(ru.name) like '%' || lower(search_term) || '%';
416  
417  	     -- Define variables
418  	     record author_matches%rowtype;
419  
420  	 begin
421  	     -- Open cursor, fetch into record
422  	     open author_matches;
423  	     fetch author_matches into record;
424  
425  	     -- If no records returned, throw error
426  	     if not author_matches%found then
427  		 raise_application_error(-20001, 'No records found.');
428  	     end if;
429  
430  	     -- If records found, loop and print
431  	     while author_matches%found loop
432  		 dbms_output.put_line(record.name);
433  		 fetch author_matches into record;
434  
435  	     -- Close loop and cursor
436  	     end loop;
437  	     close author_matches;
438  
439  	 end;
440  
441  
442  	 -- f1. fundingDistribution --------------------------------
443  
444  	 function fundingDistribution(
445  		 agency_in in varchar default null,
446  		 agency_id_in in int default null,
447  		 col_in in varchar default null,
448  		 col_id_in in int default null
449  	 ) return number
450  	 as
451  	     agency_condition varchar(100);
452  	     col_condition varchar(100);
453  	     query varchar(2000);
454  	     n_rows int;
455  	     result number(6, 2);
456  	 begin
457  
458  	     -- Make sure there is at least one agency arg and at least one col arg
459  	     if agency_in is null and agency_id_in is null then
460  		 raise_application_error(
461  		     -20001,
462  		     'Please provide either an agency name or agency id.'
463  		 );
464  	     elsif col_in is null and col_id_in is null then
465  		 raise_application_error(
466  		     -20002,
467  		     'Please provide either a collection name or collection id.'
468  		 );
469  	     end if;
470  
471  	     -- Agency condition for dynamic query
472  	     if agency_in is not null then
473  		 agency_condition := 'fa.name = ''' || agency_in || '''';
474  	     else
475  		 agency_condition := 'fa.agency_ID = ''' || agency_id_in || '''';
476  	     end if;
477  
478  	     -- Collection condition for dynamic query
479  	     if col_in is not null then
480  		 col_condition := 'c.title = ''' || col_in || '''';
481  	     else
482  		 col_condition := 'c.col_ID = ''' || col_id_in || '''';
483  	     end if;
484  
485  	     -- Dynamic query. If 0, return an error. (agency does not fund in that col)
486  	     query :=
487  		 'select count(*)
488  		 from funding_agency fa, funds f, dataset d, collection c
489  		    where ' || agency_condition || '
490  		     and ' || col_condition || '
491  		     and fa.agency_ID = f.agency_ID
492  		     and f.ds_ID = d.ds_ID
493  		     and d.col_ID = c.col_ID';
494  	     execute immediate query into n_rows;
495  
496  	     -- If no rows returned, throw error
497  	     if n_rows = 0 then
498  		 raise_application_error(
499  		     -20003,
500  		     'No matching records found. No agency funding within that collection.'
501  		 );
502  	     end if;
503  
504  	     -- Dynamic query to get prop of datasets in collection sponsored by agency
505  	     query :=
506  		 'select sum(case when ' || agency_condition || ' then 1 else 0 end) / count(*)
507  		 from funding_agency fa, funds f, dataset d, collection c
508  		 where ' || col_condition || '
509  		     and fa.agency_ID = f.agency_ID
510  		     and f.ds_ID = d.ds_ID
511  		     and d.col_ID = c.col_ID';
512  
513  	     -- Run query and return result
514  	     execute immediate query into result;
515  	     return result;
516  
517  	 end;
518  
519  
520  	 -- f5. datasetActivity ---------------------------------------
521  
522  	 function datasetActivity(
523  		 id in varchar default null,
524  		 start_date in date default null,
525  		 end_date in date default null
526  	 ) return number
527  	 as
528  	     start_timestamp timestamp;
529  	     end_timestamp timestamp;
530  	     diff_days number;
531  	     downloads_in_window int;
532  	     activity number(6, 3);
533  	 begin
534  
535  	     -- Make sure id is provided
536  	     if id is null then
537  		 raise_application_error(-20001, 'Please provide a dataset ID.');
538  	     end if;
539  
540  	     -- If no start date, use pub_date from dataset, else just convert to timestamp
541  	     if start_date is null then
542  		 select cast(pub_date as timestamp)
543  		 into start_timestamp
544  		 from dataset
545  		 where ds_ID = id;
546  	     else
547  		 start_timestamp := cast(start_date as timestamp);
548  	     end if;
549  
550  	     -- If no end date, use current timestamp
551  	     if end_date is null then
552  		 select current_timestamp
553  		 into end_timestamp
554  		 from dual;
555  	     else
556  		 end_timestamp := cast(end_date as timestamp);
557  	     end if;
558  
559  	     -- Calculate how many days are between start and end
560  	     diff_days := extract(day from (end_timestamp - start_timestamp));
561  
562  	     -- Get downloads in that time
563  	     select count(*)
564  	     into downloads_in_window
565  	     from dataset_download
566  	     where ds_ID = id
567  		 and timestamp > start_timestamp
568  		 and timestamp <= end_timestamp;
569  
570  	     -- Calculate downloads per day in that window
571  	     activity := downloads_in_window / diff_days;
572  	     return activity;
573  
574  	 end;
575  
576  
577  	 -- f6. proportionGPL -----------------------------------
578  
579  	 function proportionGPL(
580  	     subject_in in varchar default null
581  	 ) return number
582  	 as
583  	     dummy int := 0;
584  	     prop_gpl number(4, 2);
585  	 begin
586  
587  	     -- If no input, get prop for whole database
588  	     if subject_in is null then
589  		 select sum(case when sw.name = 'GPL-3.0' then 1 else 0 end) / count(*)
590  		 into prop_gpl
591  		 from software_license sw, dataset d
592  		 where sw.sw_lic_ID = d.sw_lic_ID;
593  		 return prop_gpl;
594  
595  	     -- Prop by subject
596  	     elsif subject_in is not null then
597  
598  		 -- Check whether subject is in subjects table
599  		 begin
600  		     select count(*)
601  		     into dummy
602  		     from subjects
603  		     where subject = subject_in;
604  		 exception
605  		     when no_data_found then
606  			 dummy := 0;
607  		 end;
608  
609  		 -- If dummy is 1 (subject exists), run function and return
610  		 if dummy >= 1 then
611  		     select sum(case when sw.name = 'GPL-3.0' then 1 else 0 end) / count(*)
612  		     into prop_gpl
613  		     from software_license sw, dataset d, subjects s
614  		     where s.ds_ID = d.ds_ID
615  			 and sw.sw_lic_ID = d.sw_lic_ID
616  			 and subject_in = s.subject;
617  		     return prop_gpl;
618  
619  		 -- If dummy is 0, (no subject), throw error
620  		 elsif dummy = 0 then
621  		     raise_application_error(
622  			 -20001,
623  			 'Subject not found in Dataverse.'
624  		     );
625  		 end if;
626  
627  	     end if;
628  	 end;
629  
630  
631  	 -- f7. fundingImpact --------------------------------------
632  
633  	 function fundingImpact(
634  	     grant_id_in in int default null,
635  	     agency_name_in in varchar default null,
636  	     metric in varchar default null
637  	 ) return varchar
638  	 as
639  	     row_check int;
640  	     conditions varchar(1000);
641  	     query varchar(1000);
642  	     result int;
643  	 begin
644  
645  	     -- Make sure is either a grant id or name input
646  	     if grant_id_in is null and agency_name_in is null then
647  		 raise_application_error(
648  		     -20001,
649  		     'Please provide either a grant ID or a funding agency name.'
650  		 );
651  	     end if;
652  
653  	     -- Metric input can either be publications or downloads
654  	     if metric not in ('publications', 'downloads') then
655  		 raise_application_error(
656  		     -20002,
657  		     'Please provide a metric as either "publications" or "downloads".'
658  		 );
659  	     end if;
660  
661  	     -- If both agency id and grant number are used, make sure they coincide
662  	     if grant_id_in is not null and agency_name_in is not null then
663  		 select count(*)
664  		 into row_check
665  		 from dataset d, funds f, funding_agency fa
666  		 where d.ds_id = f.ds_ID
667  		     and f.agency_ID = fa.agency_ID
668  		     and f.grant_ID = grant_id_in
669  		     and fa.name = agency_name_in;
670  		 if row_check = 0 then
671  		     raise_application_error(-20003, 'No records found.');
672  		 end if;
673  	     end if;
674  
675  	     -- Conditions based on inputs to use in query
676  	     conditions := '';
677  
678  	     if grant_id_in is not null then
679  		 conditions := conditions || ' and f.grant_ID = ''' || grant_id_in || '''';
680  	     end if;
681  
682  	     if agency_name_in is not null then
683  		 conditions := conditions || ' and fa.name = ''' || agency_name_in || '''';
684  	     end if;
685  
686  	     -- If metric is publications, create query
687  	     if metric = 'publications' then
688  
689  		 query :=
690  		     'select count(*)
691  		     from dataset d, publication p, funds f, funding_agency fa
692  		     where d.ds_ID = p.ds_ID
693  			 and d.ds_ID = f.ds_ID
694  			 and fa.agency_ID = f.agency_ID
695  			 ' || conditions;
696  
697  	     -- If metric is downloads, create query
698  	     elsif metric = 'downloads' then
699  
700  		 query :=
701  		     'select sum(d.file_downloads)
702  		     from dataset d, funds f, funding_agency fa
703  		     where d.ds_ID = f.ds_ID
704  			 and f.agency_ID = fa.agency_ID
705  			 ' || conditions;
706  
707  	     end if;
708  
709  	     -- Execute query
710  	     execute immediate query into result;
711  	     return result;
712  
713  	 end;
714  
715  
716  	 -- f8. totalSize -------------------------------------------------
717  
718  	 function totalSize(
719  	     scope in varchar default null,
720  	     id in varchar default null
721  	 ) return number
722  	 as
723  	     TOTALSIZE number;
724  	     IDCHECK int := 0;
725  	 begin
726  	     -- Checking bad inputs --------
727  	     -- if user gives id but not scope, throw error
728  	     if scope is null and id is not null then
729  		 raise_application_error(
730  		     -20001,
731  		     'If scope is specified, id must be provided.'
732  		 );
733  
734  	     -- if scope but no id, also error
735  	     elsif scope is not null and id is null then
736  		 raise_application_error(
737  		     -20001,
738  		     'If id is specified, scope must be provided.'
739  		 );
740  
741  	     -- if no inputs, get filesize of whole dataverse
742  	     elsif scope is null and id is null then
743  		 select sum(filesize)
744  		 into TOTALSIZE
745  		 from files;
746  		 return TOTALSIZE;
747  
748  	     -- Check that scope input is one of three available options
749  	     elsif scope not in ('dataset', 'collection', 'dataverse') then
750  		 raise_application_error(
751  		     -20001,
752  		     'Input for scope must be dataset, collection, or dataverse'
753  		 );
754  	     end if;
755  
756  
757  	     -- Start calculations based on scope now --------
758  	     -- dataset
759  	     if scope = 'dataset' then
760  
761  		 -- Save a 1/0 value for whether the id exists
762  		 begin
763  		     select 1
764  		     into IDCHECK
765  		     from dataset
766  		     where ds_ID = id;
767  
768  		 -- include exception to set IDCHECK to 0 if nothing found
769  		 exception
770  		     when NO_DATA_FOUND then
771  			 IDCHECK := 0;
772  		 end;
773  
774  		 -- if id exists, calculate total size
775  		 if IDCHECK = 1 then
776  		     select sum(filesize)
777  		     into TOTALSIZE
778  		     from files
779  		     where ds_ID = id;
780  
781  		 -- if id does not exist, throw error
782  		 elsif IDCHECK = 0 then
783  		     raise_application_error(
784  			 -20001,
785  			 'ds_ID is not found in dataset table.'
786  		     );
787  
788  		 end if;
789  	     end if;
790  
791  	     -- collection
792  	     if scope = 'collection' then
793  		 begin
794  		     select 1
795  		     into IDCHECK
796  		     from collection
797  		     where col_ID = id;
798  		 exception
799  		     when NO_DATA_FOUND then
800  			 IDCHECK := 0;
801  		 end;
802  
803  		 if IDCHECK = 1 then
804  		     select sum(f.filesize)
805  		     into TOTALSIZE
806  		     from files f, dataset d, collection c
807  		     where c.col_ID = d.col_ID
808  			 and d.ds_ID = f.ds_ID
809  			 and c.col_ID = id;
810  
811  		 elsif IDCHECK = 0 then
812  		     raise_application_error(
813  			 -20001,
814  			 'col_ID is not found in collection table.'
815  		     );
816  
817  		 end if;
818  	     end if;
819  
820  	     -- dataverse
821  	     if scope = 'dataverse' then
822  		 begin
823  		     select 1
824  		     into IDCHECK
825  		     from root_dataverse
826  		     where root_ID = id;
827  		 exception
828  		     when NO_DATA_FOUND then
829  			 IDCHECK := 0;
830  		 end;
831  
832  		 if IDCHECK = 1 then
833  		     select sum(f.filesize)
834  		     into TOTALSIZE
835  		     from files f, dataset d, collection c, root_dataverse r
836  		     where f.ds_ID = d.ds_ID
837  			 and d.col_ID = c.col_ID
838  			 and c.root_ID = r.root_ID
839  			 and r.root_ID = id;
840  
841  		 elsif IDCHECK = 0 then
842  		     raise_application_error(
843  			 -20001,
844  			 'root_ID is not found in root_dataverse table.'
845  		     );
846  
847  		 end if;
848  	     end if;
849  
850  	     return TOTALSIZE;
851  	 end;
852  
853  
854  end dataverse;
855  /

Warning: Package Body created with compilation errors.

SQL> 
SQL> show errors
Errors for PACKAGE BODY DATAVERSE:

LINE/COL ERROR                                                                  
-------- -----------------------------------------------------------------      
41/11    PLS-00323: subprogram or cursor 'USERLOGINATTEMPT' is declared in      
         a package specification and must be defined in the package body        
                                                                                
46/11    PLS-00323: subprogram or cursor 'GENERATENEWPASSWORD' is declared      
         in a package specification and must be defined in the package          
         body                                                                   
                                                                                
50/11    PLS-00323: subprogram or cursor 'SEARCH' is declared in a package      
         specification and must be defined in the package body                  
                                                                                
67/4     PL/SQL: SQL Statement ignored                                          

LINE/COL ERROR                                                                  
-------- -----------------------------------------------------------------      
67/16    PL/SQL: ORA-00942: table or view does not exist                        
98/5     PL/SQL: SQL Statement ignored                                          
100/10   PL/SQL: ORA-00942: table or view does not exist                        
103/4    PL/SQL: SQL Statement ignored                                          
103/16   PL/SQL: ORA-00942: table or view does not exist                        
106/5    PL/SQL: SQL Statement ignored                                          
108/10   PL/SQL: ORA-00942: table or view does not exist                        
111/5    PL/SQL: SQL Statement ignored                                          
111/12   PL/SQL: ORA-00942: table or view does not exist                        
SQL> 
SQL> commit;

Commit complete.

SQL> SQL> 
SQL> 
SQL> -- Restore options --------------------------------------------
SQL> 
SQL> spool off
