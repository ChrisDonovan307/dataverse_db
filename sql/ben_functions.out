SQL> 
SQL> 
SQL> -- Execute scripts  -------------------------------------------
SQL> 
SQL> start &&1
SQL> -- 2. userLoginAttempt(user_ID, password)
SQL> 
SQL> -- check if the hash of the provided password matches the
SQL> -- hash stored in the registered_user table
SQL> -- hashed using SHA-256
SQL> CREATE OR REPLACE FUNCTION userLoginAttempt(
  2  	 user_ID IN int DEFAULT -1,
  3  	 password IN CHAR
  4  ) RETURN number
  5  AS
  6  	 old_hash CHAR(64);
  7  	 new_hash CHAR(64);
  8  	 user_count number := 0;
  9  BEGIN
 10  	 -- verify that requested user exists
 11  	 SELECT COUNT(*)
 12  	     INTO user_count
 13  	     FROM registered_user
 14  	     WHERE ru_ID=user_ID;
 15  	 IF user_count != 1 THEN
 16  	     RETURN 0; -- No such user exists
 17  	 END IF;
 18  
 19  	 -- hash the password provided to this function
 20  	 SELECT STANDARD_HASH(RTRIM(password), 'SHA256')
 21  	     INTO new_hash
 22  	     FROM dual;
 23  	 SELECT pw_hash
 24  	     INTO old_hash
 25  	     FROM registered_user
 26  	     WHERE ru_ID=user_ID;
 27  	 IF new_hash = old_hash THEN
 28  	     RETURN 1; -- passwords match, successful login
 29  	 ELSE
 30  	     RETURN 0; -- unsuccessful login
 31  	 END IF;
 32  END;
 33  /

Function created.

SQL> 
SQL> 
SQL> -- 3. generateNewPassword(user_ID)
SQL> 
SQL> -- If the given user exists within registered_user
SQL> -- randomly generate a new password that is alphanumeric
SQL> -- and 8 characters long. Verify that it does not match the hash
SQL> -- of the previous password. Set this new hash within registered_user
SQL> -- and return the new password value.
SQL> CREATE OR REPLACE FUNCTION generateNewPassword(
  2  	 user_ID IN int DEFAULT -1
  3  ) RETURN CHAR
  4  AS
  5  	 user_count number := 0;
  6  	 old_hash CHAR(64);
  7  	 new_pw CHAR(8);
  8  	 new_pw_hash CHAR(64);
  9  BEGIN
 10  	 -- Check for existence of said user
 11  	 SELECT COUNT(*)
 12  	     INTO user_count
 13  	     FROM registered_user
 14  	     WHERE ru_ID=user_ID;
 15  	 IF user_count <> 1 THEN
 16  	     RAISE_APPLICATION_ERROR(-20500, 'User does not exist');
 17  	 END IF;
 18  
 19  	 -- Generate new random password and check against previous hash
 20  	 new_pw := DBMS_RANDOM.STRING('x', 8);
 21  	 SELECT STANDARD_HASH(RTRIM(new_pw), 'SHA256')
 22  	     INTO new_pw_hash
 23  	     FROM dual;
 24  	 SELECT pw_hash
 25  	     INTO old_hash
 26  	     FROM registered_user
 27  	     WHERE ru_ID=user_ID;
 28  	 WHILE old_hash = new_pw_hash
 29  	 LOOP
 30  	     new_pw := DBMS_RANDOM.STRING('x', 8);
 31  	     SELECT STANDARD_HASH(RTRIM(new_pw), 'SHA256')
 32  		 INTO new_pw_hash
 33  		 FROM dual;
 34  	 END LOOP;
 35  	 RETURN new_pw;
 36  END;
 37  /

Function created.

SQL> 
SQL> 
SQL> -- 4 search(searchString)
SQL> 
SQL> -- Split the searchString into tokens around whitespace.
SQL> -- Check through all Collection, Dataset, File, Publication, and Author
SQL> -- records to determine if a direct match is found. Return matching tuples
SQL> 
SQL> -- Intermediate type to help with returning a list of strings
SQL> CREATE OR REPLACE TYPE strings_t IS TABLE OF VARCHAR2 (100)
  2  /

Type created.

SQL> 
SQL> CREATE OR REPLACE FUNCTION search(
  2  	 searchString IN VARCHAR
  3  ) RETURN strings_t
  4  AS
  5  	 match_count int;
  6  	 start_index NUMBER := 1;
  7  	 end_index NUMBER;
  8  	 item VARCHAR2(255);
  9  	 -- default value is empty collection???
 10  	 items strings_t := strings_t();
 11  BEGIN
 12  	 LOOP
 13  	     end_index := INSTR(searchString, ',', start_index);
 14  	     IF end_index = 0 THEN
 15  		 item := SUBSTR(searchString, start_index);
 16  		 -- misses the last item for now. Copy over after testing
 17  		 FOR t IN (SELECT owner, table_name, column_name
 18  		     FROM all_tab_columns
 19  		     WHERE owner <> 'SYS' AND data_type LIKE '%CHAR%')
 20  		     LOOP
 21  
 22  		     EXECUTE IMMEDIATE
 23  		     'SELECT COUNT(*) FROM ' || t.owner || '.' || t.table_name ||
 24  		     ' WHERE ' || t.column_name || ' LIKE ''%' || item || '%'''
 25  		     INTO match_count;
 26  
 27  		     IF match_count > 0 THEN
 28  			items.EXTEND;
 29  			items(items.LAST) := '' || match_count || 'matches for ' || item ||
 30  			' found in ' || t.table_name || '.' || t.column_name || '';
 31  			match_count := 0;
 32  		     END IF;
 33  		     END LOOP;
 34  		 RETURN items;
 35  	     END IF;
 36  
 37  	     item := SUBSTR(searchString, start_index, end_index - start_index);
 38  	     -- Process item here
 39  	     -- Find all non-system table.column with text datatype
 40  		     FOR t IN (SELECT owner, table_name, column_name
 41  			     FROM all_tab_columns
 42  			     WHERE owner <> 'SYS' AND data_type LIKE '%CHAR%')
 43  			     LOOP
 44  
 45  			     -- Select tuples that contain the keyword within a text field
 46  			     EXECUTE IMMEDIATE
 47  			     'SELECT COUNT(*) FROM ' || t.owner || '.' ||  t.table_name ||
 48  			     ' WHERE ' || t.column_name || ' LIKE ''%' || item || '%'''
 49  			     INTO match_count;
 50  
 51  			     -- When we find match tuples, append them to the items text table
 52  			     IF match_count > 0 THEN
 53  				     items.EXTEND;
 54  				     items(items.LAST) := '' || match_count || ' matches for ' || item ||
 55  				     ' found in ' || t.table_name || '.' || t.column_name || '';
 56  				     match_count := 0;
 57  			     END IF;
 58  			     END LOOP;
 59  
 60  	     --items.EXTEND;
 61  	     --items(items.LAST) := REPLACE(REGEXP_REPLACE(item, '\s'), CHR(0));
 62  
 63  	     start_index := end_index + 1;
 64  	 END LOOP;
 65  	 RETURN items;
 66  END;
 67  /

Function created.

SQL> 
SQL> SHOW ERRORS
No errors.
SQL> SQL> 
SQL> 
SQL> -- Restore options --------------------------------------------
SQL> 
SQL> spool off
